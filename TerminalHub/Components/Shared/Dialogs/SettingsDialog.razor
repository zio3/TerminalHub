@namespace TerminalHub.Components.Shared.Dialogs
@using TerminalHub.Services
@using Microsoft.Extensions.Configuration
@inject INotificationService NotificationService
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-gear-fill me-2"></i>設定
                    </h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- タブナビゲーション -->
                    <ul class="nav nav-tabs mb-3" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "general" ? "active" : "")" 
                                    type="button" 
                                    @onclick="@(() => activeTab = "general")">
                                <i class="bi bi-gear me-1"></i>一般
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "notifications" ? "active" : "")" 
                                    type="button" 
                                    @onclick="@(() => activeTab = "notifications")">
                                <i class="bi bi-bell me-1"></i>通知
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "sessions" ? "active" : "")" 
                                    type="button" 
                                    @onclick="@(() => activeTab = "sessions")">
                                <i class="bi bi-terminal me-1"></i>セッション
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "export" ? "active" : "")" 
                                    type="button" 
                                    @onclick="@(() => activeTab = "export")">
                                <i class="bi bi-download me-1"></i>エクスポート/インポート
                            </button>
                        </li>
                    </ul>
                    
                    <!-- タブコンテンツ -->
                    <div class="tab-content">
                        @if (activeTab == "general")
                        {
                            <div class="tab-pane fade show active">
                                <h6 class="mb-3">一般設定</h6>
                                <p class="text-muted">今後追加予定</p>
                            </div>
                        }
                        else if (activeTab == "notifications")
                        {
                            <div class="tab-pane fade show active">
                                <h6 class="mb-3">通知設定</h6>
                    
                    <div class="mb-4">
                        <div class="d-flex align-items-center justify-content-between mb-2">
                            <label class="form-label mb-0">ブラウザ通知</label>
                            <span class="badge @GetNotificationBadgeClass()">@notificationStatus</span>
                        </div>
                        @if (notificationStatus == "未許可")
                        {
                            <button class="btn btn-primary btn-sm" @onclick="RequestNotificationPermission">
                                <i class="bi bi-bell me-1"></i>通知を許可する
                            </button>
                            <p class="text-muted small mt-2 mb-0">
                                処理完了時にデスクトップ通知を受け取るには、ブラウザの通知を許可してください。
                            </p>
                        }
                    </div>
                    
                    <div class="mb-4">
                        <label class="form-label">通知を送信する処理時間（秒）</label>
                        <input type="number" class="form-control" @bind="thresholdSeconds" min="0" max="3600" />
                        <small class="text-muted">0に設定すると、すべての処理完了時に通知します</small>
                    </div>
                    
                    <hr />
                    
                    <h6 class="mb-3">WebHook設定</h6>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="webHookEnabled" id="webHookSwitch">
                            <label class="form-check-label" for="webHookSwitch">
                                WebHook通知を有効にする
                            </label>
                        </div>
                    </div>
                    
                    @if (webHookEnabled)
                    {
                        <div class="mb-3">
                            <label class="form-label">WebHook URL</label>
                            <input type="url" class="form-control" @bind="webHookUrl" placeholder="https://example.com/webhook" />
                        </div>
                    }
                            </div>
                        }
                        else if (activeTab == "sessions")
                        {
                            <div class="tab-pane fade show active">
                                <h6 class="mb-3">セッション設定</h6>
                                <p class="text-muted">セッション管理に関する設定（今後追加予定）</p>
                            </div>
                        }
                        else if (activeTab == "export")
                        {
                            <div class="tab-pane fade show active">
                                <h6 class="mb-3">データのエクスポート/インポート</h6>
                                
                                <!-- エクスポート -->
                                <div class="mb-4">
                                    <h6 class="mb-2">エクスポート</h6>
                                    <p class="text-muted small">選択したカテゴリのデータをJSONファイルとしてダウンロードします。</p>
                                    
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="exportCategories.notifications" id="exportNotifications">
                                            <label class="form-check-label" for="exportNotifications">
                                                <i class="bi bi-bell me-1"></i>通知設定
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="exportCategories.sessions" id="exportSessions">
                                            <label class="form-check-label" for="exportSessions">
                                                <i class="bi bi-terminal me-1"></i>セッション情報
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="exportCategories.ui" id="exportUI">
                                            <label class="form-check-label" for="exportUI">
                                                <i class="bi bi-window me-1"></i>UI設定
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="exportCategories.history" id="exportHistory">
                                            <label class="form-check-label" for="exportHistory">
                                                <i class="bi bi-clock-history me-1"></i>履歴
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <button class="btn btn-primary btn-sm" @onclick="ExportSettings" disabled="@(!HasExportSelection)">
                                        <i class="bi bi-download me-1"></i>エクスポート
                                    </button>
                                </div>
                                
                                <hr />
                                
                                <!-- インポート -->
                                <div>
                                    <h6 class="mb-2">インポート</h6>
                                    <p class="text-muted small">JSONファイルを選択して設定をインポートします。</p>
                                    
                                    <div class="mb-3">
                                        <InputFile OnChange="@LoadImportFile" accept=".json" class="form-control" />
                                    </div>
                                    
                                    @if (importPreview != null)
                                    {
                                        <div class="alert alert-info">
                                            <h6 class="alert-heading">インポートプレビュー</h6>
                                            <small>
                                                @foreach (var category in importPreview)
                                                {
                                                    <div>
                                                        <i class="bi bi-check-circle me-1"></i>@GetCategoryDisplayName(category)
                                                    </div>
                                                }
                                            </small>
                                        </div>
                                        
                                        <button class="btn btn-warning btn-sm" @onclick="ImportSettings">
                                            <i class="bi bi-upload me-1"></i>インポート実行
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (!string.IsNullOrEmpty(saveMessage))
                    {
                        <div class="alert @(saveSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                            @saveMessage
                            <button type="button" class="btn-close" @onclick="() => saveMessage = string.Empty"></button>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">キャンセル</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveSettings">
                        <i class="bi bi-save me-1"></i>保存
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string notificationStatus = "確認中...";
    private int thresholdSeconds = 60;
    private bool webHookEnabled = false;
    private string webHookUrl = "";
    private string saveMessage = "";
    private bool saveSuccess = false;
    private string activeTab = "notifications";
    
    // エクスポート/インポート用
    private class ExportCategories
    {
        public bool notifications { get; set; } = false;
        public bool sessions { get; set; } = false;
        public bool ui { get; set; } = false;
        public bool history { get; set; } = false;
    }
    
    private ExportCategories exportCategories = new();
    private List<string>? importPreview = null;
    private Dictionary<string, object>? importData = null;
    
    private bool HasExportSelection => exportCategories.notifications || exportCategories.sessions || 
                                       exportCategories.ui || exportCategories.history;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadSettings();
            await CheckNotificationPermission();
        }
    }

    private async Task LoadSettings()
    {
        thresholdSeconds = Configuration.GetValue<int>("NotificationSettings:ProcessingTimeThresholdSeconds", 60);
        webHookEnabled = Configuration.GetValue<bool>("NotificationSettings:WebHookSettings:Enabled", false);
        webHookUrl = Configuration.GetValue<string>("NotificationSettings:WebHookSettings:Url") ?? "";
        await Task.CompletedTask;
    }
    
    private async Task CheckNotificationPermission()
    {
        try
        {
            var permission = await JSRuntime.InvokeAsync<string>("terminalHubHelpers.checkNotificationPermission");
            notificationStatus = permission switch
            {
                "granted" => "許可済み",
                "denied" => "拒否",
                "default" => "未許可",
                _ => "不明"
            };
        }
        catch
        {
            notificationStatus = "確認エラー";
        }
    }
    
    private async Task RequestNotificationPermission()
    {
        try
        {
            var granted = await NotificationService.RequestBrowserNotificationPermissionAsync();
            await CheckNotificationPermission();
            
            if (granted)
            {
                saveMessage = "通知が許可されました";
                saveSuccess = true;
            }
            else
            {
                saveMessage = "通知が拒否されました";
                saveSuccess = false;
            }
        }
        catch (Exception ex)
        {
            saveMessage = $"エラー: {ex.Message}";
            saveSuccess = false;
        }
    }
    
    private async Task SaveSettings()
    {
        try
        {
            // 設定値の検証
            if (thresholdSeconds < 0)
            {
                saveMessage = "通知時間は0以上にしてください";
                saveSuccess = false;
                return;
            }
            
            if (webHookEnabled && string.IsNullOrWhiteSpace(webHookUrl))
            {
                saveMessage = "WebHook URLを入力してください";
                saveSuccess = false;
                return;
            }
            
            // TODO: 実際の設定保存処理を実装
            // 現在はappsettings.jsonに直接保存できないため、
            // 実装時はLocalStorageやサーバー側のAPIを使用する必要があります
            
            saveMessage = "設定を保存しました（注：再起動すると元に戻ります）";
            saveSuccess = true;
            
            // 3秒後にメッセージを消す
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                await InvokeAsync(() =>
                {
                    saveMessage = "";
                    StateHasChanged();
                });
            });
        }
        catch (Exception ex)
        {
            saveMessage = $"保存エラー: {ex.Message}";
            saveSuccess = false;
        }
        await Task.CompletedTask;
    }
    
    private string GetNotificationBadgeClass()
    {
        return notificationStatus switch
        {
            "許可済み" => "bg-success",
            "拒否" => "bg-danger",
            "未許可" => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    private async Task Close()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }
    
    private async Task ExportSettings()
    {
        try
        {
            var exportData = new Dictionary<string, object>();
            
            if (exportCategories.notifications)
            {
                var settings = await JSRuntime.InvokeAsync<object>("terminalHubHelpers.getSettings");
                if (settings != null)
                {
                    exportData["notifications"] = settings;
                }
            }
            
            if (exportCategories.sessions)
            {
                var sessions = await LocalStorageService.GetAsync<object>("terminalHub_sessions");
                if (sessions != null)
                {
                    exportData["sessions"] = sessions;
                }
                
                var activeSession = await LocalStorageService.GetAsync<object>("terminalHub_activeSession");
                if (activeSession != null)
                {
                    exportData["activeSession"] = activeSession;
                }
            }
            
            if (exportCategories.ui)
            {
                var devWindowPos = await LocalStorageService.GetAsync<object>("devWindowPosition");
                if (devWindowPos != null)
                {
                    exportData["devWindowPosition"] = devWindowPos;
                }
            }
            
            if (exportCategories.history)
            {
                var history = await LocalStorageService.GetAsync<object>("inputHistory");
                if (history != null)
                {
                    exportData["inputHistory"] = history;
                }
            }
            
            // メタデータを追加
            exportData["_metadata"] = new
            {
                exportedAt = DateTime.Now,
                version = "1.0"
            };
            
            // JSONに変換してダウンロード
            var json = System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
            
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.downloadJson", 
                json, $"terminalhub_export_{DateTime.Now:yyyyMMdd_HHmmss}.json");
            
            saveMessage = "エクスポートが完了しました";
            saveSuccess = true;
        }
        catch (Exception ex)
        {
            saveMessage = $"エクスポートエラー: {ex.Message}";
            saveSuccess = false;
        }
    }
    
    private async Task LoadImportFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file.ContentType != "application/json")
            {
                saveMessage = "JSONファイルを選択してください";
                saveSuccess = false;
                return;
            }
            
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB
            using var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            
            importData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(json);
            if (importData != null)
            {
                importPreview = importData.Keys.Where(k => k != "_metadata").ToList();
            }
        }
        catch (Exception ex)
        {
            saveMessage = $"ファイル読み込みエラー: {ex.Message}";
            saveSuccess = false;
            importPreview = null;
            importData = null;
        }
    }
    
    private async Task ImportSettings()
    {
        if (importData == null) return;
        
        try
        {
            foreach (var kvp in importData.Where(k => k.Key != "_metadata"))
            {
                switch (kvp.Key)
                {
                    case "notifications":
                        await JSRuntime.InvokeVoidAsync("terminalHubHelpers.saveSettings", kvp.Value);
                        break;
                    case "sessions":
                        await LocalStorageService.SetAsync("terminalHub_sessions", kvp.Value);
                        break;
                    case "activeSession":
                        await LocalStorageService.SetAsync("terminalHub_activeSession", kvp.Value);
                        break;
                    case "devWindowPosition":
                        await LocalStorageService.SetAsync("devWindowPosition", kvp.Value);
                        break;
                    case "inputHistory":
                        await LocalStorageService.SetAsync("inputHistory", kvp.Value);
                        break;
                }
            }
            
            saveMessage = "インポートが完了しました。ページを再読み込みしてください。";
            saveSuccess = true;
            importPreview = null;
            importData = null;
        }
        catch (Exception ex)
        {
            saveMessage = $"インポートエラー: {ex.Message}";
            saveSuccess = false;
        }
    }
    
    private string GetCategoryDisplayName(string category)
    {
        return category switch
        {
            "notifications" => "通知設定",
            "sessions" => "セッション情報",
            "activeSession" => "アクティブセッション",
            "devWindowPosition" => "開発ウィンドウ位置",
            "inputHistory" => "入力履歴",
            _ => category
        };
    }
}