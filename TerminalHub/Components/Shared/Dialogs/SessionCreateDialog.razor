@using TerminalHub.Models
@using TerminalHub.Services
@using Microsoft.JSInterop
@using System.IO
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject ISessionManager SessionManager
@inject ILogger<SessionCreateDialog> Logger

<div class="modal fade @(IsVisible && !showCreateFolderDialog ? "show" : "")" tabindex="-1" style="@(IsVisible && !showCreateFolderDialog ? "display: block;" : "display: none;")" @onmousedown="OnBackdropMouseDown" @onmouseup="OnBackdropMouseUp">
    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true" @onmousedown:stopPropagation="true" @onmouseup:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">新しいセッションを作成</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">フォルダを選択</label>
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="folderPath" placeholder="フォルダパスを入力または選択" />
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="LoadRecentFolders">
                                <i class="bi bi-folder-open"></i> 参照
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto;">
                                @if (recentFolders.Any())
                                {
                                    <li><h6 class="dropdown-header">最近使用したフォルダ</h6></li>
                                    @foreach (var folder in recentFolders.Take(10))
                                    {
                                        <li>
                                            <a class="dropdown-item d-flex align-items-center" href="#" @onclick="() => SelectFolder(folder)" @onclick:preventDefault="true">
                                                <i class="bi bi-folder-fill text-warning me-2"></i>
                                                <div class="flex-grow-1 overflow-hidden">
                                                    <span class="text-truncate d-block" title="@folder">
                                                        <strong>@Path.GetFileName(folder)</strong>
                                                        <small class="text-muted ms-2">@folder</small>
                                                    </span>
                                                </div>
                                            </a>
                                        </li>
                                    }
                                    <li><hr class="dropdown-divider"></li>
                                }
                                <li>
                                    <a class="dropdown-item" href="#" @onclick="SelectDefaultFolder" @onclick:preventDefault="true">
                                        <i class="bi bi-house-fill text-primary me-2"></i>ユーザーホーム
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>


                <!-- 共通オプションセレクター -->
                <SessionOptionsSelector @ref="optionsSelector"
                                      SelectedType="selectedType"
                                      SelectedTypeChanged="OnTerminalTypeChanged"
                                      @bind-StartupCommand="startupCommand"
                                      ClaudeOptions="claudeCodeOptions"
                                      GeminiOptions="geminiOptions" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">キャンセル</button>
                <button type="button" class="btn btn-primary" @onclick="CreateSession" disabled="@string.IsNullOrWhiteSpace(folderPath)">
                    作成
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible && !showCreateFolderDialog)
{
    <div class="modal-backdrop fade show"></div>
}

@* フォルダ作成確認ダイアログ *@
@if (showCreateFolderDialog)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">フォルダの作成</h5>
                </div>
                <div class="modal-body">
                    <p>指定されたフォルダが存在しません。</p>
                    <p class="mb-2"><strong>@folderPath</strong></p>
                    <p>このフォルダを作成しますか？</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelFolderCreation">キャンセル</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmFolderCreation">作成する</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<SessionCreateResult> OnSessionCreate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private SessionOptionsSelector? optionsSelector;
    private string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
    private TerminalType selectedType = TerminalType.Terminal;
    private string startupCommand = "";

    private SessionOptionsSelector.ClaudeCodeOptions claudeCodeOptions = new();
    private SessionOptionsSelector.GeminiOptionsData geminiOptions = new();
    private List<string> recentFolders = new();
    private const string RECENT_FOLDERS_KEY = "recentFolders";
    private const int MAX_RECENT_FOLDERS = 20;
    private bool showCreateFolderDialog = false;
    private bool pendingSessionCreation = false;

    public class SessionCreateResult
    {
        public string FolderPath { get; set; } = "";
        public TerminalType TerminalType { get; set; }
        public Dictionary<string, string> Options { get; set; } = new();
    }

    protected override Task OnInitializedAsync()
    {
        // JavaScript interopはOnAfterRenderAsyncで実行
        return Task.CompletedTask;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRecentFolders();
            StateHasChanged();
        }
    }

    private async Task LoadRecentFolders()
    {
        try
        {
            // LocalStorageから最近のフォルダを読み込む
            var folders = await LocalStorage.GetAsync<List<string>>(RECENT_FOLDERS_KEY) ?? new List<string>();
            
            // 現在のセッションのフォルダも追加
            var currentSessionFolders = SessionManager.GetAllSessions()
                .Select(s => s.FolderPath)
                .Where(f => !string.IsNullOrEmpty(f))
                .Distinct();
            
            // 重複を排除して結合
            recentFolders = folders.Union(currentSessionFolders)
                .Where(f => Directory.Exists(f))
                .Take(MAX_RECENT_FOLDERS)
                .ToList();
        }
        catch
        {
            recentFolders = new List<string>();
        }
    }

    private async Task SaveRecentFolder(string folderPath)
    {
        if (string.IsNullOrWhiteSpace(folderPath)) return;
        
        try
        {
            var folders = await LocalStorage.GetAsync<List<string>>(RECENT_FOLDERS_KEY) ?? new List<string>();
            
            // 既存の同じパスを削除して先頭に追加
            folders.Remove(folderPath);
            folders.Insert(0, folderPath);
            
            // 最大数を超えたら古いものを削除
            if (folders.Count > MAX_RECENT_FOLDERS)
            {
                folders = folders.Take(MAX_RECENT_FOLDERS).ToList();
            }
            
            await LocalStorage.SetAsync(RECENT_FOLDERS_KEY, folders);
        }
        catch
        {
            // エラーが発生しても継続
        }
    }

    private void SelectFolder(string folder)
    {
        folderPath = folder;
    }

    private void SelectDefaultFolder()
    {
        folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
    }

    private async Task CreateSession()
    {
        // フォルダが存在するかチェック
        if (!Directory.Exists(folderPath))
        {
            // フォルダが存在しない場合は確認ダイアログを表示
            showCreateFolderDialog = true;
            pendingSessionCreation = true;
            StateHasChanged();
            return;
        }

        await ExecuteSessionCreation();
    }

    private async Task ExecuteSessionCreation()
    {
        var result = new SessionCreateResult
        {
            FolderPath = folderPath,
            TerminalType = selectedType,
            Options = optionsSelector?.GetOptions() ?? new Dictionary<string, string>()
        };

        // フォルダを最近使用したフォルダリストに保存
        await SaveRecentFolder(folderPath);

        await OnSessionCreate.InvokeAsync(result);
        ResetForm();
    }

    private async Task ConfirmFolderCreation()
    {
        try
        {
            // フォルダを作成
            Directory.CreateDirectory(folderPath);
            Logger.LogInformation($"Created folder: {folderPath}");
            
            showCreateFolderDialog = false;
            
            // フォルダ作成成功後、セッション作成を続行
            if (pendingSessionCreation)
            {
                pendingSessionCreation = false;
                await ExecuteSessionCreation();
            }
            else
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Failed to create folder: {folderPath}");
            // エラーが発生した場合もダイアログを閉じる
            showCreateFolderDialog = false;
            pendingSessionCreation = false;
            StateHasChanged();
        }
    }

    private void CancelFolderCreation()
    {
        showCreateFolderDialog = false;
        pendingSessionCreation = false;
        StateHasChanged();
    }

    private async Task Cancel()
    {
        ResetForm();
        await OnCancel.InvokeAsync();
    }

    private bool isMouseDownOnBackdrop = false;

    private void OnBackdropMouseDown()
    {
        isMouseDownOnBackdrop = true;
    }

    private void OnBackdropMouseUp()
    {
        if (isMouseDownOnBackdrop)
        {
            _ = Cancel();
        }
        isMouseDownOnBackdrop = false;
    }

    private void ResetForm()
    {
        folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        selectedType = TerminalType.Terminal;
        startupCommand = "";
        claudeCodeOptions = new();
        geminiOptions = new();
        showCreateFolderDialog = false;
        pendingSessionCreation = false;
    }

    private Task OnTerminalTypeChanged(TerminalType newType)
    {
        selectedType = newType;
        return Task.CompletedTask;
    }

}