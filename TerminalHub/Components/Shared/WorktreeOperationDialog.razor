@using TerminalHub.Models
@using TerminalHub.Services
@inject IGitService GitService

<div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="display: @(IsVisible ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-diagram-3 me-2"></i>サブセッション作成
                </h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(ParentSessionName))
                {
                    <div class="mb-3">
                        <small class="text-muted">親セッション: @ParentSessionName</small>
                    </div>
                }
                
                <!-- タブナビゲーション -->
                <ul class="nav nav-tabs mb-3">
                    <li class="nav-item">
                        <button class="nav-link @(activeTab == TabType.Create ? "active" : "")" 
                                @onclick="@(() => activeTab = TabType.Create)">
                            <i class="bi bi-plus-circle me-1"></i>Worktree新規作成
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(activeTab == TabType.Existing ? "active" : "")" 
                                @onclick="@(() => activeTab = TabType.Existing)">
                            <i class="bi bi-folder-plus me-1"></i>既存Worktree追加
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(activeTab == TabType.SamePath ? "active" : "")" 
                                @onclick="@(() => activeTab = TabType.SamePath)">
                            <i class="bi bi-folder me-1"></i>同じフォルダで開く
                        </button>
                    </li>
                </ul>
                
                <!-- タブコンテンツ -->
                <div class="tab-content">
                    @if (activeTab == TabType.Create)
                    {
                        <!-- 新規Worktree作成 -->
                        <div class="tab-pane active">
                            @if (!IsGitRepository)
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    <strong>Git管理が必要です</strong><br/>
                                    Worktreeの作成にはGitリポジトリが必要です。
                                </div>
                            }
                            else
                            {
                            <div class="mb-3">
                                <label class="form-label">ブランチ選択方法</label>
                                <div class="btn-group d-flex mb-2" role="group">
                                    <input type="radio" class="btn-check" name="branchOption" id="newBranch" 
                                           checked="@(branchSelectionMode == BranchSelectionMode.NewBranch)"
                                           @onclick="@(() => branchSelectionMode = BranchSelectionMode.NewBranch)">
                                    <label class="btn btn-outline-secondary" for="newBranch">新規ブランチ</label>
                                    
                                    <input type="radio" class="btn-check" name="branchOption" id="existingBranch" 
                                           checked="@(branchSelectionMode == BranchSelectionMode.ExistingBranch)"
                                           @onclick="@(() => branchSelectionMode = BranchSelectionMode.ExistingBranch)">
                                    <label class="btn btn-outline-secondary" for="existingBranch">既存ブランチ</label>
                                </div>
                            </div>
                            
                            @if (branchSelectionMode == BranchSelectionMode.NewBranch)
                            {
                                <div class="mb-3">
                                    <label for="branchName" class="form-label">新しいブランチ名</label>
                                    <input type="text" class="form-control" id="branchName" 
                                           @bind="branchName" 
                                           @bind:event="oninput"
                                           @onkeydown="OnKeyDown"
                                           placeholder="feature/new-feature" 
                                           autofocus>
                                    <small class="form-text text-muted">
                                        このブランチ名で新しいWorktreeが作成されます
                                    </small>
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label for="existingBranchSelect" class="form-label">既存のブランチを選択</label>
                                    @if (availableBranches == null)
                                    {
                                        <div class="text-center">
                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                            ブランチ一覧を読み込み中...
                                        </div>
                                    }
                                    else if (availableBranches.Count == 0)
                                    {
                                        <div class="alert alert-warning">
                                            利用可能なブランチがありません
                                        </div>
                                    }
                                    else
                                    {
                                        <select class="form-select" id="existingBranchSelect" 
                                                @onchange="OnExistingBranchSelected">
                                            <option value="">ブランチを選択してください</option>
                                            @foreach (var branch in availableBranches)
                                            {
                                                <option value="@branch">@branch</option>
                                            }
                                        </select>
                                    }
                                </div>
                                
                                @if (!string.IsNullOrEmpty(selectedExistingBranch) && branchWorktreeInfo != null)
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                        <strong>このブランチには既にWorktreeが存在します</strong><br/>
                                        <span>パス: @branchWorktreeInfo.Path</span><br/>
                                        <small>「既存Worktree追加」タブから追加してください</small>
                                    </div>
                                }
                            }
                            
                            <!-- 共通オプションセレクター -->
                            <SessionOptionsSelector @ref="optionsSelector"
                                                  SelectedType="selectedTerminalType"
                                                  SelectedTypeChanged="OnTerminalTypeChanged"
                                                  @bind-StartupCommand="startupCommand"
                                                  ClaudeOptions="claudeOptions"
                                                  GeminiOptions="geminiOptions"
                                                  DisableContinueOption="false" />
                            }
                        </div>
                    }
                    else if (activeTab == TabType.Existing)
                    {
                        <!-- 既存Worktree追加 -->
                        <div class="tab-pane active">
                            @if (!IsGitRepository)
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    <strong>Git管理が必要です</strong><br/>
                                    既存のWorktreeを追加するにはGitリポジトリが必要です。
                                </div>
                            }
                            else
                            {
                            <div class="mb-3">
                                <label for="worktreePath" class="form-label">既存のWorktreeを選択</label>
                                @if (availableWorktrees == null)
                                {
                                    <div class="text-center">
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                        Worktree一覧を読み込み中...
                                    </div>
                                }
                                else if (availableWorktrees.Count == 0)
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                        利用可能なWorktreeがありません
                                    </div>
                                }
                                else
                                {
                                    <select class="form-select" id="worktreeSelect" 
                                            value="@selectedWorktreePath"
                                            @onchange="OnWorktreeSelected">
                                        <option value="">Worktreeを選択してください</option>
                                        @foreach (var worktree in availableWorktrees)
                                        {
                                            <option value="@worktree.Path">
                                                (@worktree.BranchName)
                                                @if (worktree.IsMain)
                                                {
                                                    <text> - メイン</text>
                                                }
                                            </option>
                                        }
                                    </select>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(selectedWorktreePath))
                            {
                                <!-- セッションオプション選択 -->
                                <div class="mt-3">
                                    <SessionOptionsSelector @ref="optionsSelectorExistingWorktree"
                                                          SelectedType="selectedTerminalType"
                                                          SelectedTypeChanged="OnTerminalTypeChanged"
                                                          @bind-StartupCommand="startupCommand"
                                                          ClaudeOptions="claudeOptions"
                                                          GeminiOptions="geminiOptions" />
                                </div>
                            }
                            }
                        </div>
                    }
                    else if (activeTab == TabType.SamePath)
                    {
                        <!-- 同じフォルダで開く -->
                        <div class="tab-pane active">
                            <!-- 共通オプションセレクター -->
                            <SessionOptionsSelector @ref="optionsSelectorSamePath"
                                                  SelectedType="selectedTerminalType"
                                                  SelectedTypeChanged="OnTerminalTypeChanged"
                                                  @bind-StartupCommand="startupCommand"
                                                  ClaudeOptions="claudeOptions"
                                                  GeminiOptions="geminiOptions" />
                            
                            @if (ParentSessionName != null)
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    親セッション "@ParentSessionName" と同じフォルダで開きます
                                </div>
                            }
                        </div>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel" disabled="@isProcessing">
                    キャンセル
                </button>
                <button type="button" class="btn btn-success" @onclick="ProcessOperation" 
                        disabled="@(!CanProcess || isProcessing)">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    else
                    {
                        <i class="bi bi-@GetButtonIcon() me-2"></i>
                    }
                    @GetButtonText()
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string? ParentSessionName { get; set; }
    [Parameter] public Guid? ParentSessionId { get; set; }
    [Parameter] public bool IsGitRepository { get; set; }
    [Parameter] public EventCallback<WorktreeOperationResult> OnWorktreeOperation { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private TabType activeTab = TabType.Create;
    private string branchName = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    
    // 新規プロパティ
    private BranchSelectionMode branchSelectionMode = BranchSelectionMode.NewBranch;
    private string selectedExistingBranch = "";
    private List<string>? availableBranches = null;
    
    // Worktree関連
    private List<WorktreeInfo>? availableWorktrees = null;
    private string selectedWorktreePath = "";
    private WorktreeInfo? branchWorktreeInfo = null;
    
    // オプションセレクター関連
    private SessionOptionsSelector? optionsSelector;
    private SessionOptionsSelector? optionsSelectorSamePath;
    private SessionOptionsSelector? optionsSelectorExistingWorktree;
    private TerminalType selectedTerminalType = TerminalType.Terminal;
    private string startupCommand = "";
    private SessionOptionsSelector.ClaudeCodeOptions claudeOptions = new();
    private SessionOptionsSelector.GeminiOptionsData geminiOptions = new();

    private bool CanProcess
    {
        get
        {
            return activeTab switch
            {
                TabType.Create => IsGitRepository && (branchSelectionMode == BranchSelectionMode.NewBranch 
                    ? !string.IsNullOrWhiteSpace(branchName)
                    : (!string.IsNullOrWhiteSpace(selectedExistingBranch) && branchWorktreeInfo == null)),
                TabType.Existing => IsGitRepository && !string.IsNullOrWhiteSpace(selectedWorktreePath),
                TabType.SamePath => true, // 同じフォルダの場合は常に有効
                _ => false
            };
        }
    }

    [Parameter] public string? ParentSessionPath { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            // ダイアログが表示されたときにリセット
            activeTab = TabType.Create;
            branchName = "";
            errorMessage = "";
            isProcessing = false;
            branchSelectionMode = BranchSelectionMode.NewBranch;
            selectedExistingBranch = "";
            selectedTerminalType = TerminalType.Terminal;
            availableBranches = null;
            availableWorktrees = null;
            selectedWorktreePath = "";
            branchWorktreeInfo = null;
            startupCommand = "";
            claudeOptions = new();
            geminiOptions = new();
            
            // 親セッションのパスがあり、Gitリポジトリの場合はブランチ一覧とworktree一覧を取得
            if (!string.IsNullOrEmpty(ParentSessionPath) && IsGitRepository)
            {
                await LoadAvailableBranches();
                await LoadAvailableWorktrees();
            }
        }
    }

    private async Task ProcessOperation()
    {
        if (!CanProcess)
            return;

        isProcessing = true;
        errorMessage = "";

        try
        {
            var result = new WorktreeOperationResult
            {
                OperationType = activeTab switch
                {
                    TabType.Create => WorktreeOperationType.CreateNew,
                    TabType.Existing => WorktreeOperationType.AddExisting,
                    TabType.SamePath => WorktreeOperationType.SamePath,
                    _ => WorktreeOperationType.CreateNew
                },
                BranchName = activeTab == TabType.Create 
                    ? (branchSelectionMode == BranchSelectionMode.NewBranch ? branchName : selectedExistingBranch)
                    : availableWorktrees?.FirstOrDefault(w => w.Path == selectedWorktreePath)?.BranchName ?? "",
                WorktreePath = activeTab == TabType.Existing ? selectedWorktreePath : null,
                TerminalType = selectedTerminalType,
                Options = activeTab switch
                {
                    TabType.Create => optionsSelector?.GetOptions() ?? new Dictionary<string, string>(),
                    TabType.Existing => optionsSelectorExistingWorktree?.GetOptions() ?? new Dictionary<string, string>(),
                    TabType.SamePath => optionsSelectorSamePath?.GetOptions() ?? new Dictionary<string, string>(),
                    _ => new Dictionary<string, string>()
                },
                UseExistingBranch = activeTab == TabType.Create && branchSelectionMode == BranchSelectionMode.ExistingBranch
            };

            await OnWorktreeOperation.InvokeAsync(result);
        }
        catch (Exception ex)
        {
            errorMessage = $"操作中にエラーが発生しました: {ex.Message}";
            isProcessing = false;
        }
    }


    private bool IsValidBranchName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return false;

        var reserved = new[] { "HEAD", "FETCH_HEAD", "ORIG_HEAD", "MERGE_HEAD" };
        if (reserved.Contains(name, StringComparer.OrdinalIgnoreCase))
            return false;

        var invalidChars = new[] { ' ', '~', '^', ':', '?', '*', '[', '\\' };
        if (invalidChars.Any(c => name.Contains(c)))
            return false;
            
        if (name.Contains(".."))
            return false;

        if (name.StartsWith('.') || name.StartsWith('-') || name.EndsWith('.') || name.EndsWith('/'))
            return false;

        return true;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isProcessing && CanProcess)
        {
            await ProcessOperation();
        }
        else if (e.Key == "Escape")
        {
            await OnCancel.InvokeAsync();
        }
    }

    private async Task LoadAvailableBranches()
    {
        if (string.IsNullOrEmpty(ParentSessionPath))
            return;
            
        try
        {
            var gitInfo = await GitService.GetGitInfoAsync(ParentSessionPath);
            if (gitInfo != null && gitInfo.AvailableBranches.Count > 0)
            {
                // 現在のブランチを除外
                availableBranches = gitInfo.AvailableBranches
                    .Where(b => b != gitInfo.CurrentBranch)
                    .ToList();
            }
            else
            {
                availableBranches = new List<string>();
            }
        }
        catch
        {
            availableBranches = new List<string>();
        }
    }
    
    private async Task LoadAvailableWorktrees()
    {
        if (string.IsNullOrEmpty(ParentSessionPath))
            return;
            
        try
        {
            var worktrees = await GitService.GetWorktreeListAsync(ParentSessionPath);
            // 現在のフォルダ（メインworktree）を除外
            availableWorktrees = worktrees.Where(w => !w.IsMain).ToList();
        }
        catch
        {
            availableWorktrees = new List<WorktreeInfo>();
        }
    }
    
    private async Task OnExistingBranchSelected(ChangeEventArgs e)
    {
        var branchName = e.Value?.ToString() ?? "";
        selectedExistingBranch = branchName;
        
        // 選択されたブランチのworktreeが存在するかチェック
        if (!string.IsNullOrEmpty(branchName) && availableWorktrees != null)
        {
            branchWorktreeInfo = availableWorktrees.FirstOrDefault(w => w.BranchName == branchName);
        }
        else
        {
            branchWorktreeInfo = null;
        }
    }
    
    private async Task OnWorktreeSelected(ChangeEventArgs e)
    {
        selectedWorktreePath = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
    
    private string GetButtonIcon()
    {
        return activeTab switch
        {
            TabType.Create => "plus-circle",
            TabType.Existing => "folder-plus",
            TabType.SamePath => "folder",
            _ => "plus-circle"
        };
    }
    
    private string GetButtonText()
    {
        return activeTab switch
        {
            TabType.Create => "Worktree作成",
            TabType.Existing => "Worktree追加",
            TabType.SamePath => "セッション作成",
            _ => "作成"
        };
    }
    
    private Task OnTerminalTypeChanged(TerminalType newType)
    {
        selectedTerminalType = newType;
        return Task.CompletedTask;
    }

    private Task OnStartupCommandChanged(string newCommand)
    {
        startupCommand = newCommand;
        return Task.CompletedTask;
    }

    public class WorktreeOperationResult
    {
        public WorktreeOperationType OperationType { get; set; }
        public string BranchName { get; set; } = "";
        public string? WorktreePath { get; set; }
        public TerminalType TerminalType { get; set; } = TerminalType.Terminal;
        public Dictionary<string, string> Options { get; set; } = new();
        public bool UseExistingBranch { get; set; }
    }
    
    public enum WorktreeOperationType
    {
        CreateNew,
        AddExisting,
        SamePath
    }
    
    private enum BranchSelectionMode
    {
        NewBranch,
        ExistingBranch
    }


    private enum TabType
    {
        Create,
        Existing,
        SamePath
    }
}