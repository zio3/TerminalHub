@using TerminalHub.Models
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="@(IsVisible ? "display: block;" : "display: none;")" @onmousedown="OnBackdropMouseDown" @onmouseup="OnBackdropMouseUp">
    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true" @onmousedown:stopPropagation="true" @onmouseup:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">新しいセッションを作成</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">フォルダを選択</label>
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="folderPath" placeholder="フォルダパスを入力または選択" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="BrowseFolder">
                            <i class="bi bi-folder-open"></i> 参照
                        </button>
                    </div>
                </div>


                <!-- 共通オプションセレクター -->
                <SessionOptionsSelector @ref="optionsSelector"
                                      SelectedType="selectedType"
                                      SelectedTypeChanged="OnTerminalTypeChanged"
                                      @bind-StartupCommand="startupCommand"
                                      ClaudeOptions="claudeCodeOptions"
                                      GeminiOptions="geminiOptions" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">キャンセル</button>
                <button type="button" class="btn btn-primary" @onclick="CreateSession" disabled="@string.IsNullOrWhiteSpace(folderPath)">
                    作成
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<SessionCreateResult> OnSessionCreate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private SessionOptionsSelector? optionsSelector;
    private string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
    private TerminalType selectedType = TerminalType.Terminal;
    private string startupCommand = "";

    private SessionOptionsSelector.ClaudeCodeOptions claudeCodeOptions = new();
    private SessionOptionsSelector.GeminiOptionsData geminiOptions = new();

    public class SessionCreateResult
    {
        public string FolderPath { get; set; } = "";
        public TerminalType TerminalType { get; set; }
        public Dictionary<string, string> Options { get; set; } = new();
    }

    private async Task BrowseFolder()
    {
        // フォルダ選択ダイアログはブラウザのセキュリティ制限により直接は開けないため、
        // ユーザーに手動で入力してもらうか、別の方法を検討する必要があります
        await JSRuntime.InvokeVoidAsync("alert", "フォルダパスを直接入力してください。");
    }

    private async Task CreateSession()
    {
        var result = new SessionCreateResult
        {
            FolderPath = folderPath,
            TerminalType = selectedType,
            Options = optionsSelector?.GetOptions() ?? new Dictionary<string, string>()
        };

        await OnSessionCreate.InvokeAsync(result);
        ResetForm();
    }

    private async Task Cancel()
    {
        ResetForm();
        await OnCancel.InvokeAsync();
    }

    private bool isMouseDownOnBackdrop = false;

    private void OnBackdropMouseDown()
    {
        isMouseDownOnBackdrop = true;
    }

    private void OnBackdropMouseUp()
    {
        if (isMouseDownOnBackdrop)
        {
            _ = Cancel();
        }
        isMouseDownOnBackdrop = false;
    }

    private void ResetForm()
    {
        folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        selectedType = TerminalType.Terminal;
        startupCommand = "";
        claudeCodeOptions = new();
        geminiOptions = new();
    }

    private Task OnTerminalTypeChanged(TerminalType newType)
    {
        selectedType = newType;
        return Task.CompletedTask;
    }

}