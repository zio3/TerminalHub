@using TerminalHub.Models
@using TerminalHub.Constants
@using TerminalHub.Services
@inject ILocalStorageService LocalStorageService

<style>
    .active-session {
        border: 2px solid #0d6efd !important;
        background-color: #e7f1ff !important;
    }
    
    .active-session:hover {
        background-color: #d7e9ff !important;
    }
    
    @@keyframes bell-ring {
        0% { transform: rotate(0); }
        10% { transform: rotate(14deg); }
        20% { transform: rotate(-8deg); }
        30% { transform: rotate(14deg); }
        40% { transform: rotate(-4deg); }
        50% { transform: rotate(10deg); }
        60% { transform: rotate(0); }
        100% { transform: rotate(0); }
    }
    
    .bi-bell-fill {
        animation: bell-ring 2s ease-in-out infinite;
    }
    
    .collapse-icon {
        transition: transform 0.2s ease;
        cursor: pointer;
        font-size: 0.8rem;
    }
    
    .collapse-icon.collapsed {
        transform: rotate(-90deg);
    }
    
    .sub-sessions {
        transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
        overflow: hidden;
    }
    
    .sub-sessions.collapsed {
        max-height: 0 !important;
        opacity: 0;
    }
</style>

<div class="col-md-3 border-end bg-light p-3 d-flex flex-column" style="height: 100vh;">
    
    <div class="mb-3">
        <button class="btn btn-primary w-100" @onclick="() => OnAddSession.InvokeAsync()" disabled="@IsAddingSession">
            <i class="bi bi-plus-circle"></i> 新しいセッションを作成
        </button>
    </div>

    <div class="list-group flex-grow-1" style="overflow-y: auto;">
        @{
            var groupedSessions = GetGroupedSessions();
        }
        @foreach (var sessionGroup in groupedSessions)
        {
            var parentSession = sessionGroup.FirstOrDefault(s => !s.ParentSessionId.HasValue);
            var childSessions = sessionGroup.Where(s => s.ParentSessionId.HasValue).ToList();
            var isCollapsed = parentSession != null && IsCollapsed(parentSession.SessionId);
            var hasChildren = childSessions.Any();
            
            @foreach (var session in sessionGroup)
            {
                var isParent = !session.ParentSessionId.HasValue;
                var isChild = session.ParentSessionId.HasValue;
                
                @if (isParent || (!isCollapsed && isChild))
                {
                    <div class="list-group-item list-group-item-action @(session.SessionId == ActiveSessionId ? "active-session" : "")" 
                         @onclick="async () => await HandleSessionClick(session.SessionId)"
                         style="cursor: pointer; @(isChild ? "padding-left: 2.5rem;" : "")">
                        <div class="d-flex w-100 justify-content-between align-items-center">
                            <div class="flex-fill">
                                <h6 class="mb-1">
                                    @if (isParent && hasChildren)
                                    {
                                        <i class="bi bi-chevron-down collapse-icon @(isCollapsed ? "collapsed" : "")"
                                           @onclick:stopPropagation="true"
                                           @onclick="async () => await ToggleCollapse(session.SessionId)"></i>
                                    }
                            @if (session.HasNotificationPending)
                            {
                                <span class="text-danger me-1" title="処理が完了しました">
                                    <i class="bi bi-bell-fill"></i>
                                </span>
                            }
                            @session.GetDisplayName()
                            @if (session.TerminalType != TerminalType.Terminal)
                            {
                                <span class="badge bg-info ms-2">@GetTerminalTypeBadge(session.TerminalType)</span>
                            }
                            @if (session.IsGitRepository && !string.IsNullOrEmpty(session.GitBranch))
                            {
                                <span class="badge @(session.IsWorktree ? "bg-warning" : "bg-success") ms-1" title="@(session.IsWorktree ? "Worktree" : "Git ブランチ")">
                                    <i class="bi @(session.IsWorktree ? "bi-git" : "bi-git") me-1"></i>@session.GitBranch
                                    @if (session.HasUncommittedChanges)
                                    {
                                        <i class="bi bi-circle-fill text-danger git-status-indicator" title="未コミットの変更があります"></i>
                                    }
                                </span>
                            }
                            @if (!session.IsWorktree)
                            {
                                <button class="btn btn-sm btn-outline-success border-0 ms-1" 
                                        @onclick:stopPropagation="true"
                                        @onclick="() => OnCreateWorktree.InvokeAsync(session.SessionId)"
                                        title="@(session.IsGitRepository ? "新しいWorktreeを作成" : "サブセッションを作成")"
                                        style="font-size: 0.7rem; padding: 0.1rem 0.3rem;">
                                    <i class="bi bi-plus-circle"></i>
                                </button>
                            }
                        </h6>
                        @if (session.ProcessingElapsedSeconds.HasValue || !string.IsNullOrEmpty(session.ProcessingStatus))
                        {
                            <div>
                                <small class="@(session.IsWaitingForUserInput ? "text-warning" : "text-primary")">
                                    @if (session.IsWaitingForUserInput)
                                    {
                                        <i class="bi bi-person-fill-exclamation me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-clock-fill me-1"></i>
                                    }
                                    @if (!string.IsNullOrEmpty(session.ProcessingStatus))
                                    {
                                        <span>@session.ProcessingStatus</span>
                                        @if (session.ProcessingElapsedSeconds.HasValue)
                                        {
                                            <span> · </span>
                                        }
                                    }
                                    @if (session.ProcessingElapsedSeconds.HasValue)
                                    {
                                        <span>@(session.ProcessingElapsedSeconds)秒</span>
                                    }
                                    @if (!string.IsNullOrEmpty(session.ProcessingDirection))
                                    {
                                        <span> · @GetDirectionText(session.ProcessingDirection)</span>
                                    }
                                    @if (!string.IsNullOrEmpty(session.ProcessingTokens))
                                    {
                                        <span> @session.ProcessingTokens トークン</span>
                                    }
                                </small>
                            </div>
                        }
                    </div>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-outline-secondary btn-sm border-0 opacity-50" @onclick:stopPropagation="true" 
                                @onclick="() => OnSessionSettings.InvokeAsync(session.SessionId)"
                                title="セッション設定"
                                style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                            <i class="bi bi-gear"></i>
                        </button>
                        <button class="btn btn-outline-secondary btn-sm border-0 opacity-50" @onclick:stopPropagation="true" 
                                @onclick="() => OnSessionRemove.InvokeAsync(session.SessionId)"
                                title="セッション削除"
                                style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>
                <div class="mt-2">
                    @if (EditingMemoSessionId == session.SessionId)
                    {
                        <input type="text" class="form-control form-control-sm" 
                               placeholder="メモを入力..."
                               value="@TempMemoText"
                               @onclick:stopPropagation="true"
                               @oninput="@((e) => OnMemoInput.InvokeAsync(e.Value?.ToString() ?? ""))"
                               @onblur="@(async () => await OnMemoSave(session.SessionId))"
                               @onkeydown="@(async (e) => await OnMemoKeyDown(e, session.SessionId))"
                               @onkeydown:stopPropagation="true"
                               style="font-size: 0.875rem;" 
                               autofocus />
                    }
                    else
                    {
                        <div class="text-muted small" 
                             @onclick:stopPropagation="true"
                             @onclick="() => OnMemoEdit(session.SessionId, session.Memo)"
                             style="cursor: pointer; font-size: 0.875rem; padding: 0.25rem 0.5rem; border-radius: 0.25rem; background-color: rgba(0,0,0,0.03);">
                            @if (string.IsNullOrWhiteSpace(session.Memo))
                            {
                                <span style="font-style: italic; opacity: 0.6;">メモを追加...</span>
                            }
                            else
                            {
                                @session.Memo
                            }
                        </div>
                    }
                </div>
            </div>
                }
            }
        }
    </div>

    @if (!Sessions.Any())
    {
        <div class="alert alert-info mt-3">
            <i class="bi bi-info-circle"></i> ボタンをクリックしてセッションを作成してください
        </div>
    }

    <!-- 設定ボタンとショートカット説明を最下部に固定 -->
    <div class="mt-auto border-top" style="position: sticky; bottom: 0; background-color: #f8f9fa;">
        <div class="p-2">
            <button class="btn btn-outline-secondary btn-sm w-100" @onclick="OnSettingsClick">
                <i class="bi bi-gear me-1"></i>設定
            </button>
        </div>
        <div class="p-2 pt-0" style="font-size: 0.8rem; color: #6c757d;">
            <p class="mb-1"><strong>ショートカット:</strong></p>
            <p class="mb-0"><kbd>Ctrl+Shift+N</kbd> - 新しいセッション</p>
            <p class="mb-0"><kbd>Ctrl+Shift+D</kbd> - デバッグ情報 (コンソール)</p>
            <p class="mb-0"><kbd>Ctrl+Shift+C</kbd> - ストレージクリア</p>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<SessionInfo> Sessions { get; set; } = new();
    [Parameter] public Guid? ActiveSessionId { get; set; }
    [Parameter] public bool IsAddingSession { get; set; }
    [Parameter] public Guid? EditingMemoSessionId { get; set; }
    [Parameter] public string TempMemoText { get; set; } = "";
    
    [Parameter] public EventCallback OnAddSession { get; set; }
    [Parameter] public EventCallback<Guid> OnSessionSelect { get; set; }
    [Parameter] public Func<Guid, Task> OnGitStatusRefresh { get; set; } = _ => Task.CompletedTask;
    [Parameter] public EventCallback<Guid> OnSessionRemove { get; set; }
    [Parameter] public EventCallback<string> OnMemoInput { get; set; }
    [Parameter] public Func<Guid, Task> OnMemoSave { get; set; } = _ => Task.CompletedTask;
    [Parameter] public Func<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Guid, Task> OnMemoKeyDown { get; set; } = (_, _) => Task.CompletedTask;
    [Parameter] public Action<Guid, string> OnMemoEdit { get; set; } = (_, _) => { };
    [Parameter] public EventCallback OnSettingsClick { get; set; }
    [Parameter] public EventCallback<Guid> OnCreateWorktree { get; set; }
    [Parameter] public EventCallback<Guid> OnSessionSettings { get; set; }
    
    private Dictionary<Guid, bool> collapsedStates = new();

    protected override async Task OnInitializedAsync()
    {
        // 保存された折りたたみ状態を読み込む
        var savedStates = await LocalStorageService.GetAsync<Dictionary<Guid, bool>>("sessionCollapsedStates");
        if (savedStates != null)
        {
            collapsedStates = savedStates;
        }
    }
    
    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    private string GetTerminalTypeBadge(TerminalType terminalType)
    {
        return terminalType switch
        {
            TerminalType.ClaudeCode => "Claude",
            TerminalType.GeminiCLI => "Gemini",
            _ => "Terminal"
        };
    }
    
    private string GetDirectionText(string direction)
    {
        return direction switch
        {
            "↑" => "送信",
            "↓" => "受信", 
            "⚒" => "処理中",
            _ => direction
        };
    }
    
    private List<List<SessionInfo>> GetGroupedSessions()
    {
        var result = new List<List<SessionInfo>>();
        var processed = new HashSet<Guid>();
        
        // まず親セッションとその子セッションをグループ化
        foreach (var session in Sessions.OrderBy(s => s.CreatedAt))
        {
            if (processed.Contains(session.SessionId))
                continue;
                
            var group = new List<SessionInfo>();
            
            // ParentSessionIdを持たない場合は親セッション
            if (!session.ParentSessionId.HasValue)
            {
                group.Add(session);
                processed.Add(session.SessionId);
                
                // 子セッション（ParentSessionIdがこのセッションを指すもの）を探す
                var children = Sessions
                    .Where(s => s.ParentSessionId == session.SessionId)
                    .OrderBy(s => s.CreatedAt);
                    
                foreach (var child in children)
                {
                    group.Add(child);
                    processed.Add(child.SessionId);
                }
            }
            // 親が存在しない子セッションの場合（親が削除された場合など）
            else if (!Sessions.Any(s => s.SessionId == session.ParentSessionId))
            {
                group.Add(session);
                processed.Add(session.SessionId);
            }
            
            if (group.Any())
            {
                result.Add(group);
            }
        }
        
        return result;
    }
    
    private async Task HandleSessionClick(Guid sessionId)
    {
        // セッションを選択
        await OnSessionSelect.InvokeAsync(sessionId);
        
        // Gitステータスを再確認
        await OnGitStatusRefresh(sessionId);
    }
    
    private async Task ToggleCollapse(Guid sessionId)
    {
        if (collapsedStates.ContainsKey(sessionId))
        {
            collapsedStates[sessionId] = !collapsedStates[sessionId];
        }
        else
        {
            collapsedStates[sessionId] = true;
        }
        
        // 状態を保存
        await LocalStorageService.SetAsync("sessionCollapsedStates", collapsedStates);
    }
    
    private bool IsCollapsed(Guid sessionId)
    {
        return collapsedStates.ContainsKey(sessionId) && collapsedStates[sessionId];
    }
    
    private bool HasChildren(Guid sessionId)
    {
        return Sessions.Any(s => s.ParentSessionId == sessionId);
    }
}