@using TerminalHub.Models

<div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="display: @(IsVisible ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-git me-2"></i>新しいWorktreeを作成
                </h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(ParentSessionName))
                {
                    <div class="mb-3">
                        <small class="text-muted">親セッション: @ParentSessionName</small>
                    </div>
                }
                
                <div class="mb-3">
                    <label for="branchName" class="form-label">新しいブランチ名</label>
                    <input type="text" class="form-control" id="branchName" 
                           @bind="branchName" 
                           @bind:event="oninput"
                           @onkeydown="OnKeyDown"
                           placeholder="feature/new-feature" 
                           autofocus>
                    <small class="form-text text-muted">
                        このブランチ名で新しいWorktreeが作成されます
                    </small>
                </div>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel" disabled="@isCreating">
                    キャンセル
                </button>
                <button type="button" class="btn btn-success" @onclick="CreateWorktree" disabled="@(isCreating || string.IsNullOrWhiteSpace(branchName))">
                    @if (isCreating)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    else
                    {
                        <i class="bi bi-plus-circle me-2"></i>
                    }
                    Worktree作成
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string? ParentSessionName { get; set; }
    [Parameter] public EventCallback<string> OnWorktreeCreate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string branchName = "";
    private string errorMessage = "";
    private bool isCreating = false;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // ダイアログが表示されたときにブランチ名をクリア
            branchName = "";
            errorMessage = "";
            isCreating = false;
        }
    }

    private async Task CreateWorktree()
    {
        if (string.IsNullOrWhiteSpace(branchName))
        {
            errorMessage = "ブランチ名を入力してください";
            return;
        }

        // ブランチ名の検証
        if (!IsValidBranchName(branchName))
        {
            errorMessage = "無効なブランチ名です。英数字、ハイフン、スラッシュ、アンダースコアのみ使用できます";
            return;
        }

        isCreating = true;
        errorMessage = "";

        try
        {
            await OnWorktreeCreate.InvokeAsync(branchName);
        }
        catch (Exception ex)
        {
            errorMessage = $"Worktree作成中にエラーが発生しました: {ex.Message}";
            isCreating = false;
        }
    }

    private bool IsValidBranchName(string name)
    {
        // Gitブランチ名の基本的な検証
        if (string.IsNullOrWhiteSpace(name))
            return false;

        // 予約語チェック
        var reserved = new[] { "HEAD", "FETCH_HEAD", "ORIG_HEAD", "MERGE_HEAD" };
        if (reserved.Contains(name, StringComparer.OrdinalIgnoreCase))
            return false;

        // 無効な文字チェック
        var invalidChars = new[] { ' ', '~', '^', ':', '?', '*', '[', '\\' };
        if (invalidChars.Any(c => name.Contains(c)))
            return false;
            
        // 連続するドットのチェック
        if (name.Contains(".."))
            return false;

        // 先頭と末尾のチェック
        if (name.StartsWith('.') || name.StartsWith('-') || name.EndsWith('.') || name.EndsWith('/'))
            return false;

        return true;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isCreating && !string.IsNullOrWhiteSpace(branchName))
        {
            await CreateWorktree();
        }
        else if (e.Key == "Escape")
        {
            await OnCancel.InvokeAsync();
        }
    }
}