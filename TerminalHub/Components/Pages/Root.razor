@page "/multisession"
@page "/"
@using TerminalHub.Components.Shared
@using TerminalHub.Constants
@using TerminalHub.Models
@using TerminalHub.Services
@using Microsoft.JSInterop
@using Microsoft.Extensions.Configuration
@inject ISessionManager SessionManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject IConfiguration Configuration
@inject INotificationService NotificationService
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>マルチセッション ターミナル</PageTitle>

<Toast @ref="toast" />
<SessionCreateDialog IsVisible="showCreateDialog" 
                    OnSessionCreate="OnSessionCreate" 
                    OnCancel="OnDialogCancel" />
<DevWindow @bind-IsVisible="showDevWindow" />
<SettingsModal @bind-IsVisible="showSettingsModal" />

<div class="container-fluid h-100">
    <div class="row h-100">
        <SessionList Sessions=@sessions
                     ActiveSessionId=@activeSessionId
                     IsAddingSession=@isAddingSession
                     EditingMemoSessionId=@editingMemoSessionId
                     TempMemoText=@tempMemoText
                     OnAddSession="AddSession"
                     OnSessionSelect="async (sessionId) => await SelectSession(sessionId)"
                     OnSessionRemove="async (sessionId) => await RemoveSession(sessionId)"
                     OnMemoInput="(text) => tempMemoText = text"
                     OnMemoSave="SaveMemo"
                     OnMemoKeyDown="HandleMemoKeyDown"
                     OnMemoEdit="StartEditingMemo"
                     OnSettingsClick="ShowSettings" />

        <div class="col-md-9 p-0 position-relative" style="height: 100vh; display: flex; flex-direction: column;">
            @if (activeSessionId != null)
            {
                <!-- ターミナル部分 (70%) -->
                <div style="height: 70%; overflow: hidden;">
                    <div class="terminal-wrapper h-100">
                        @foreach (var session in sessions)
                        {
                            <div id="terminal-@session.SessionId" class="terminal-container" 
                                 style="display: @(session.SessionId == activeSessionId ? "block" : "none");"></div>
                        }
                    </div>
                </div>
                
                <!-- WebUI部分 (30%) -->
                <div style="height: 30%; overflow-y: auto; border-top: 1px solid #dee2e6; background-color: #f8f9fa;">
                    @{
                        var currentSession = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
                    }
                    @if (currentSession != null && (currentSession.TerminalType == TerminalType.ClaudeCode || currentSession.TerminalType == TerminalType.GeminiCLI))
                    {
                        <div class="p-3 h-100 d-flex flex-column">
                            
                            <div class="flex-grow-1 d-flex flex-column">
                                <textarea class="form-control flex-grow-1" 
                                          @bind="inputText"
                                          @bind:event="oninput"
                                          @onkeydown="OnTextAreaKeyDown"
                                          @onkeydown:preventDefault="@shouldPreventDefault"
                                          placeholder="@(GetPlaceholderText(currentSession.TerminalType))"
                                          style="resize: none; font-family: 'Consolas', 'Monaco', monospace;">
                                </textarea>
                                
                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                    <div>
                                        <kbd>Enter</kbd> で送信 | <kbd>Shift+Enter</kbd> で改行
                                    </div>
                                    <div class="btn-group">
                                        <button class="btn btn-secondary @(isEscapePressed ? "active" : "")" 
                                                @onclick="SendEscape" 
                                                title="中断 (Esc)"
                                                style="@(isEscapePressed ? "transform: scale(0.95);" : "")">
                                            <i class="bi bi-stop-circle"></i> 中断
                                        </button>
                                        @if (currentSession.TerminalType == TerminalType.ClaudeCode)
                                        {
                                            <button class="btn btn-secondary @(isModeSwitchPressed ? "active" : "")" 
                                                    @onclick="SendModeSwitch" 
                                                    title="モード切替 (Alt+M)"
                                                    style="@(isModeSwitchPressed ? "transform: scale(0.95);" : "")">
                                                <i class="bi bi-arrow-repeat"></i> Alt+M
                                            </button>
                                        }
                                        @if (showDevButton)
                                        {
                                            <button class="btn btn-secondary" 
                                                    @onclick="() => showDevWindow = !showDevWindow" 
                                                    title="開発ツール">
                                                <i class="bi bi-code-square"></i> Dev
                                            </button>
                                        }
                                        <button class="btn btn-primary" @onclick="SendInput" disabled="@(string.IsNullOrWhiteSpace(inputText))">
                                            <i class="bi bi-send"></i> 送信
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center text-muted">
                            <p>このセッションタイプではWebUIは使用できません</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-terminal" style="font-size: 4rem;"></i>
                        <p class="mt-3">左側からセッションを選択してください</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private List<SessionInfo> sessions = new();
    private Guid? activeSessionId;
    private bool isAddingSession = false;
    private bool showCreateDialog = false;
    private IJSObjectReference? activeTerminal;
    private ConPtySession? activeSession;
    private CancellationTokenSource? readCts;
    private DotNetObjectReference<Root>? dotNetRef;
    private Toast? toast;
    private string inputText = "";
    private bool shouldPreventDefault = false;
    private Guid? editingMemoSessionId = null;
    private string tempMemoText = "";
    private bool showDevWindow = false;
    private bool showDevButton = false;
    private bool showSettingsModal = false;
    
    // 処理状態管理用
    private DateTime? lastProcessingUpdateTime = null;
    private System.Threading.Timer? processingStatusTimer = null;
    private string? lastProcessingSeconds = null;

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);

        // 開発モード設定を読み込み
        showDevButton = Configuration.GetValue<bool>("DevelopmentMode:ShowDevButton", false);
        showDevWindow = Configuration.GetValue<bool>("DevelopmentMode:ShowDevWindowOnStartup", false);
        
        // 通知権限をリクエスト（削除 - 設定モーダルに移動）
        // await NotificationService.RequestBrowserNotificationPermissionAsync();

        // ローカルストレージからセッション情報を復元
        var savedSessions = await LocalStorageService.LoadSessionsAsync();
        var savedActiveId = await LocalStorageService.LoadActiveSessionIdAsync();

        // 保存されたセッション情報をSessionManagerに復元
        var restoredSessionIds = new HashSet<Guid>();
        foreach (var sessionInfo in savedSessions)
        {
            // 重複チェック（ホットリロード対策）
            var existingSession = SessionManager.GetSessionInfo(sessionInfo.SessionId);
            if (existingSession != null)
            {
                restoredSessionIds.Add(sessionInfo.SessionId);
                continue;
            }

            // セッションを再作成（ターミナルプロセスの起動）- 元のSessionIDを使用
            try
            {
                var newSession = await SessionManager.CreateSessionAsync(
                    sessionInfo.SessionId,
                    sessionInfo.FolderPath,
                    sessionInfo.DisplayName,
                    sessionInfo.TerminalType,
                    sessionInfo.Options);

                // メモ情報も復元
                if (!string.IsNullOrEmpty(sessionInfo.Memo))
                {
                    var createdSession = SessionManager.GetSessionInfo(newSession.SessionId);
                    if (createdSession != null)
                    {
                        createdSession.Memo = sessionInfo.Memo;
                        await SessionManager.SaveSessionInfoAsync(createdSession);
                    }
                }

                restoredSessionIds.Add(newSession.SessionId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to restore session {sessionInfo.SessionId}: {ex.Message}");
            }
        }

        sessions = SessionManager.GetAllSessions().ToList();

        // 保存されたアクティブセッションがあれば選択
        if (savedActiveId != null && sessions.Any(s => s.SessionId == savedActiveId))
        {
            await SelectSession(savedActiveId.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // キーボードショートカットを登録
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.setupKeyboardShortcuts", dotNetRef);
            // 通知用のDotNetRefを設定
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.setDotNetRef", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnShortcutNewSession()
    {
        await AddSession();
    }
    
    [JSInvokable]
    public async Task OnNotificationClick(string sessionId)
    {
        if (Guid.TryParse(sessionId, out var guid))
        {
            await SelectSession(guid);
        }
    }

    private async Task AddSession()
    {
        showCreateDialog = true;
        await Task.CompletedTask; // 必要に応じて非同期処理を追加
    }
    
    private void ShowSettings()
    {
        showSettingsModal = true;
    }

    private async Task OnSessionCreate(SessionCreateDialog.SessionCreateResult result)
    {
        showCreateDialog = false;
        isAddingSession = true;

        try
        {
            var sessionInfo = await SessionManager.CreateSessionAsync(
                result.FolderPath, 
                "", // セッション名は空（フォルダ名を使用）
                result.TerminalType, 
                result.Options);

            sessions = SessionManager.GetAllSessions().ToList();

            // ローカルストレージに保存
            await LocalStorageService.SaveSessionsAsync(sessions);

            StateHasChanged();

            await Task.Delay(TerminalConstants.DomUpdateDelay);
            await SelectSession(sessionInfo.SessionId);
        }
        catch (Exception ex)
        {
            toast?.ShowError($"セッション作成エラー: {ex.Message}");
        }
        finally
        {
            isAddingSession = false;
        }
    }

    private void OnDialogCancel()
    {
        showCreateDialog = false;
    }


    private async Task SelectSession(Guid sessionId)
    {
        if (activeSessionId == sessionId)
        {
            return;
        }

        // 前のセッションをクリーンアップ
        var previousCts = readCts;
        readCts = null;

        if (previousCts != null)
        {
            try
            {
                previousCts.Cancel();
                // キャンセル要求だけ送信して即座に次へ進む
            }
            finally
            {
                previousCts.Dispose();
            }
        }

        // 既存のアクティブターミナルを破棄
        if (activeTerminal != null)
        {
            try
            {
                await activeTerminal.DisposeAsync();
            }
            catch (Exception)
            {
                // Console.WriteLine($"[SelectSession] ターミナル破棄エラー: {ex.Message}");
            }
            activeTerminal = null;
        }

        // すべてのターミナルを非表示にする（JavaScriptで直接制御）
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.hideAllTerminals");
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // セッションをアクティブに
        await SessionManager.SetActiveSessionAsync(sessionId);
        activeSessionId = sessionId;
        activeSession = SessionManager.GetSession(sessionId);
        
        // 通知フラグをクリア
        var selectedSession = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (selectedSession != null && selectedSession.HasNotificationPending)
        {
            selectedSession.HasNotificationPending = false;
            Console.WriteLine($"[Notification Debug] セッション {sessionId} の通知フラグをクリア");
        }

        // アクティブセッション変更を即座にUIに反映
        StateHasChanged();

        // アクティブセッションIDをローカルストレージに保存
        await LocalStorageService.SaveActiveSessionIdAsync(sessionId);

        // ターミナルdivが存在するか確認し、表示する
        try
        {
            var divExists = await JSRuntime.InvokeAsync<bool>("terminalHubHelpers.checkElementExists", 
                $"terminal-{sessionId.ToString()}");

            if (divExists)
            {
                // 新しいターミナルを表示
                await JSRuntime.InvokeVoidAsync("terminalFunctions.showTerminal", sessionId.ToString());
            }
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // ターミナルを初期化
        await InitializeTerminal(sessionId);

        // ターミナルのリサイズを強制的に実行
        try
        {
            if (activeTerminal != null)
            {
                await activeTerminal.InvokeVoidAsync("resize");
            }
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // 出力読み取りを開始
        if (activeSession != null)
        {
            readCts = new CancellationTokenSource();
            _ = Task.Run(() => ReadOutput(readCts.Token));
        }

        // ターミナルを最下段にスクロール
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.scrollToBottom", sessionId.ToString());
        }
        catch (Exception)
        {
            // エラーは無視
        }
    }

    private async Task InitializeTerminal(Guid sessionId)
    {
        var terminalId = $"terminal-{sessionId.ToString()}";
        // Console.WriteLine($"[InitializeTerminal] 開始: terminalId={terminalId}");

        // JavaScript側の既存ターミナルも削除
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.cleanupTerminal", sessionId.ToString());
        }
        catch { }

        // Console.WriteLine($"[InitializeTerminal] 新しいターミナルを作成");
        try
        {
            activeTerminal = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "terminalFunctions.createMultiSessionTerminal", 
                terminalId, 
                sessionId.ToString(), 
                dotNetRef);

            // Console.WriteLine($"[InitializeTerminal] ターミナル作成成功");
        }
        catch (Exception)
        {
            // Console.WriteLine($"[InitializeTerminal] ターミナル作成エラー: {ex.Message}");
        }
    }

    private async Task ReadOutput(CancellationToken cancellationToken)
    {
        var localSessionId = activeSessionId; // ローカル変数にコピー
        // Console.WriteLine($"[ReadOutput] 開始: sessionId={localSessionId}");

        if (activeSession == null || activeTerminal == null)
        {
            // Console.WriteLine($"[ReadOutput] 条件不足で終了");
            return;
        }

        var buffer = new char[TerminalConstants.DefaultBufferSize];

        while (!cancellationToken.IsCancellationRequested)
        {
            try
            {
                // キャンセルが要求されているか再確認
                if (cancellationToken.IsCancellationRequested)
                    break;

                var charsRead = await activeSession.ReadAsync(buffer, 0, buffer.Length);
                if (charsRead > 0)
                {
                    // データ書き込み前に再度キャンセルを確認
                    if (cancellationToken.IsCancellationRequested)
                        break;

                    var data = new string(buffer, 0, charsRead);
                    // Console.WriteLine($"[ReadOutput] セッション {localSessionId} に {charsRead} 文字書き込み");

                    // Claude Codeセッションの場合、処理状態を解析
                    if (activeSessionId == localSessionId)
                    {
                        var currentSession = sessions.FirstOrDefault(s => s.SessionId == localSessionId);
                        if (currentSession?.TerminalType == TerminalType.ClaudeCode)
                        {
                            // Claude Codeの処理状態パターンを検出
                            AnalyzeClaudeCodeOutput(data);
                        }
                    }

                    await activeTerminal.InvokeVoidAsync("write", data);
                }
            }
            catch (Exception)
            {
                if (!cancellationToken.IsCancellationRequested)
                {
                    // Console.WriteLine($"[ReadOutput] 読み取りエラー: {ex.Message}");
                }
                break;
            }
        }

        // Console.WriteLine($"[ReadOutput] 終了: sessionId={localSessionId}");
    }

    private void StartEditingMemo(Guid sessionId, string currentMemo)
    {
        editingMemoSessionId = sessionId;
        tempMemoText = currentMemo ?? "";
        StateHasChanged();
    }

    private async Task SaveMemo(Guid sessionId)
    {
        if (editingMemoSessionId == sessionId)
        {
            await UpdateSessionMemo(sessionId, tempMemoText);
            editingMemoSessionId = null;
            tempMemoText = "";
            StateHasChanged();
        }
    }

    private async Task HandleMemoKeyDown(KeyboardEventArgs e, Guid sessionId)
    {
        if (e.Key == "Enter")
        {
            await SaveMemo(sessionId);
        }
        else if (e.Key == "Escape")
        {
            editingMemoSessionId = null;
            tempMemoText = "";
            StateHasChanged();
        }
    }

    private async Task UpdateSessionMemo(Guid sessionId, string memo)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            session.Memo = memo;
            // ローカルストレージを更新
            await LocalStorageService.SaveSessionsAsync(sessions);
        }
    }

    private async Task RemoveSession(Guid sessionId)
    {
        // アクティブセッションの場合、読み取りタスクを停止
        if (sessionId == activeSessionId)
        {
            var ctsToCancel = readCts;
            readCts = null;

            if (ctsToCancel != null)
            {
                try
                {
                    ctsToCancel.Cancel();
                    // キャンセル要求だけ送信して即座に次へ進む
                }
                finally
                {
                    ctsToCancel.Dispose();
                }
            }

            if (activeTerminal != null)
            {
                await activeTerminal.DisposeAsync();
                activeTerminal = null;
            }
        }

        // ターミナルのクリーンアップはdestroyTerminalで処理される

        await SessionManager.RemoveSessionAsync(sessionId);
        sessions = SessionManager.GetAllSessions().ToList();

        // ローカルストレージを更新
        await LocalStorageService.SaveSessionsAsync(sessions);

        if (activeSessionId == sessionId)
        {
            activeSessionId = null;
            activeSession = null;

            // セッション削除を即座にUIに反映
            StateHasChanged();

            await LocalStorageService.SaveActiveSessionIdAsync(null);

            // 他のセッションがあれば最初のものを選択
            if (sessions.Any())
            {
                await SelectSession(sessions.First().SessionId);
            }
        }
        else
        {
            // 削除されたセッションがアクティブでない場合もUIを更新
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task SendInput(string sessionId, string data)
    {
        var guid = Guid.Parse(sessionId);
        if (activeSession != null && guid == activeSessionId)
        {
            await activeSession.WriteAsync(data);
        }
    }

    [JSInvokable]
    public void OnTerminalSizeChanged(string sessionId, int cols, int rows)
    {
        var guid = Guid.Parse(sessionId);
        if (guid == activeSessionId && activeSession != null)
        {
            activeSession.Resize(cols, rows);
        }
    }

    private async Task DestroyTerminal(Guid sessionId, bool showAlert = true)
    {
        // Console.WriteLine($"[DestroyTerminal] セッション {sessionId} のターミナルを破棄");

        try
        {
            // JavaScript側のターミナルを破棄
            await JSRuntime.InvokeVoidAsync("terminalFunctions.destroyTerminal", sessionId.ToString());

            // C#側のターミナル参照を削除（アクティブセッションの場合のみ）
            if (activeSessionId == sessionId && activeTerminal != null)
            {
                await activeTerminal.DisposeAsync();
                activeTerminal = null;
                // Console.WriteLine($"[DestroyTerminal] C#側のターミナル参照を削除");
            }

            // アクティブセッションの場合は読み取り処理を停止
            if (activeSessionId == sessionId && readCts != null)
            {
                readCts.Cancel();
                readCts.Dispose();
                readCts = null;
                // Console.WriteLine($"[DestroyTerminal] 読み取り処理を停止");
            }

            if (showAlert)
            {
                toast?.ShowSuccess("ターミナルを破棄しました");
            }
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"[DestroyTerminal] エラー: {ex.Message}");
            if (showAlert)
            {
                toast?.ShowError($"ターミナル破棄エラー: {ex.Message}");
            }
        }
    }

    private async Task RecreateTerminal(Guid sessionId)
    {
        // Console.WriteLine($"[RecreateTerminal] セッション {sessionId} のターミナルを再作成");

        try
        {
            // セッションがアクティブな場合のみ再作成
            if (activeSessionId == sessionId)
            {
                // 既存のターミナルを破棄（アラートなし）
                await DestroyTerminal(sessionId, false);

                // DOM更新と読み取りタスクの完全な終了を待つ
                await Task.Delay(TerminalConstants.SessionCreationDelay);

                // ターミナルdivの表示状態を確実に設定
                await JSRuntime.InvokeVoidAsync("terminalFunctions.ensureTerminalVisible", sessionId.ToString());

                // 新しいターミナルを初期化
                await InitializeTerminal(sessionId);

                // 読み取り処理を再開
                if (activeSession != null)
                {
                    readCts = new CancellationTokenSource();
                    _ = Task.Run(() => ReadOutput(readCts.Token));
                    // Console.WriteLine($"[RecreateTerminal] 読み取り処理を再開");

                    // ターミナルに初期プロンプトを送信して接続を確認
                    if (activeTerminal != null)
                    {
                        // Enterキーを送信してプロンプトを表示
                        await activeSession.WriteAsync("\r\n");
                        // Console.WriteLine($"[RecreateTerminal] プロンプト送信完了");
                    }
                }

                toast?.ShowSuccess("ターミナルを再作成しました");
            }
            else
            {
                toast?.ShowWarning("このセッションを選択してからターミナルを再作成してください");
            }
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"[RecreateTerminal] エラー: {ex.Message}");
            toast?.ShowError($"ターミナル再作成エラー: {ex.Message}");
        }
    }



    private void AnalyzeClaudeCodeOutput(string data)
    {
        try
        {
            // 現在のセッションIDを取得
            var currentSessionId = activeSessionId;
            if (!currentSessionId.HasValue) return;
            
            // デバッグ用：受信データの一部を表示（最初の100文字）
            // var preview = data.Length > 100 ? data.Substring(0, 100) + "..." : data;
            // Console.WriteLine($"[Notification Debug] AnalyzeClaudeCodeOutput - データ受信: {preview}");

            // ANSIエスケープシーケンスと制御文字を除去（今回受信したデータのみ処理）
            var cleanedData = data;

            // CSI (Control Sequence Introducer) シーケンス - 最も一般的なANSIエスケープシーケンス
            // ESC [ で始まり、パラメータ（数字やセミコロン）の後に終端文字が続く
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"\x1B\[[0-9;?]*[A-Za-z]", "", System.Text.RegularExpressions.RegexOptions.None);

            // OSC (Operating System Command) シーケンス
            // ESC ] で始まり、BEL または ESC \ で終わる
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"\x1B\][^\x07\x1B]*(?:\x07|\x1B\\)", "", System.Text.RegularExpressions.RegexOptions.None);

            // その他のESCシーケンス（2文字のシーケンス）
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"\x1B[^[\]()#;]", "", System.Text.RegularExpressions.RegexOptions.None);

            // Private Mode シーケンス
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"\x1B\[\?[0-9;]*[A-Za-z]", "", System.Text.RegularExpressions.RegexOptions.None);

            // SGR (Select Graphic Rendition) パラメータを含む複雑なシーケンス
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"\x1B\[[0-9;]*m", "", System.Text.RegularExpressions.RegexOptions.None);

            // 制御文字（改行とタブ以外）
            cleanedData = System.Text.RegularExpressions.Regex.Replace(cleanedData, 
                @"[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]", " ", System.Text.RegularExpressions.RegexOptions.None);

            // 処理状態パターンの検出
            var patterns = new[]
            {
                @"[·✽]\s*(?:.*?ing[^(]*)\s*\((\d+)s\s*·\s*([↑↓⚒])\s*(\d+)\s*tokens?\s*·\s*esc to interrupt\)",
                @"\[Request interrupted by user\]"
            };

            foreach (var pattern in patterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, 
                    System.Text.RegularExpressions.RegexOptions.Singleline);
                var matches = regex.Matches(cleanedData);
                
                foreach (System.Text.RegularExpressions.Match match in matches)
                {
                    if (pattern.Contains("Request interrupted"))
                    {
                        // Console.WriteLine("[Claude Code Status] 処理が中断されました");
                        Console.WriteLine("[Notification Debug] 中断パターンを検出 - UpdateSessionProcessingStatus(null)を呼び出し");
                        UpdateSessionProcessingStatus(null);
                    }
                    else if (match.Groups.Count >= 4)
                    {
                        var seconds = match.Groups[1].Value;
                        var direction = match.Groups[2].Value;
                        var tokens = match.Groups[3].Value;
                        
                        Console.WriteLine($"[Notification Debug] 処理状態パターンマッチ: {seconds}秒, {direction}, {tokens}トークン");
                        
                        // 秒数が変わらない場合はUIを更新しない
                        if (lastProcessingSeconds == seconds)
                        {
                            // Console.WriteLine($"[Claude Code Status] 秒数変化なし ({seconds}秒) - UI更新をスキップ");
                            // タイマーのリセットのみ行う
                            lastProcessingUpdateTime = DateTime.Now;
                            processingStatusTimer?.Dispose();
                            processingStatusTimer = new System.Threading.Timer(
                                CheckProcessingTimeout,
                                null,
                                TimeSpan.FromSeconds(5),
                                Timeout.InfiniteTimeSpan
                            );
                            continue;
                        }
                        
                        lastProcessingSeconds = seconds;
                        
                        // 数値に変換
                        if (int.TryParse(seconds, out var elapsedSeconds))
                        {
                            Console.WriteLine($"[Notification Debug] UpdateSessionProcessingStatus({elapsedSeconds}, {tokens}, {direction})を呼び出し");
                            UpdateSessionProcessingStatus(elapsedSeconds, tokens, direction);
                            // Console.WriteLine($"[Claude Code Status] {elapsedSeconds}秒 · {direction} {tokens}トークン");
                        }
                        else
                        {
                            Console.WriteLine($"[Notification Debug] 秒数の変換に失敗: {seconds}");
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Claude Code Analysis Error] {ex.Message}");
        }
    }

    private void UpdateSessionProcessingStatus(string? statusText)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
        if (session != null)
        {
            // Console.WriteLine($"[UI Update] セッション {activeSessionId} の処理状態を更新: {statusText ?? "null"}");
            
            session.ProcessingStatus = statusText;
            if (statusText != null)
            {
                session.ProcessingStartTime = DateTime.Now;
                lastProcessingUpdateTime = DateTime.Now;
                
                // タイマーをリセット
                processingStatusTimer?.Dispose();
                processingStatusTimer = new System.Threading.Timer(
                    CheckProcessingTimeout,
                    null,
                    TimeSpan.FromSeconds(5),
                    Timeout.InfiniteTimeSpan
                );
            }
            else
            {
                Console.WriteLine($"[Notification Debug] UpdateSessionProcessingStatus - 処理完了を検出");
                Console.WriteLine($"[Notification Debug] ProcessingElapsedSeconds: {session.ProcessingElapsedSeconds}");
                
                // 処理完了時の通知
                if (session.ProcessingElapsedSeconds.HasValue)
                {
                    Console.WriteLine($"[Notification Debug] 通知サービスを呼び出し中 - {session.ProcessingElapsedSeconds.Value}秒");
                    
                    // 通知フラグを設定（アクティブでない場合のみ）
                    if (activeSessionId != session.SessionId)
                    {
                        session.HasNotificationPending = true;
                        Console.WriteLine($"[Notification Debug] セッション {session.SessionId} に通知フラグを設定");
                    }
                    
                    // セッション情報をコピー（非同期処理で使用するため）
                    var sessionCopy = new SessionInfo
                    {
                        SessionId = session.SessionId,
                        DisplayName = session.DisplayName,
                        FolderPath = session.FolderPath,
                        FolderName = session.FolderName,
                        CreatedAt = session.CreatedAt,
                        LastAccessedAt = session.LastAccessedAt,
                        IsActive = session.IsActive,
                        TerminalType = session.TerminalType,
                        Options = session.Options,
                        Memo = session.Memo
                    };
                    var elapsedSecondsCopy = session.ProcessingElapsedSeconds.Value;
                    
                    _ = Task.Run(async () => 
                    {
                        try
                        {
                            Console.WriteLine($"[Notification Debug] NotifyProcessingCompleteAsync呼び出し開始");
                            Console.WriteLine($"[Notification Debug] SessionCopy - Id: {sessionCopy.SessionId}, FolderPath: {sessionCopy.FolderPath}");
                            await NotificationService.NotifyProcessingCompleteAsync(sessionCopy, elapsedSecondsCopy);
                            Console.WriteLine($"[Notification Debug] NotifyProcessingCompleteAsync呼び出し完了");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"[Notification Debug] 通知エラー: {ex.Message}");
                            Console.WriteLine($"[Notification Debug] スタックトレース: {ex.StackTrace}");
                        }
                    });
                }
                else
                {
                    Console.WriteLine($"[Notification Debug] ProcessingElapsedSecondsがnullのため通知をスキップ");
                }
                
                session.ProcessingStartTime = null;
                session.ProcessingElapsedSeconds = null;
                session.ProcessingTokens = null;
                session.ProcessingDirection = null;
                lastProcessingUpdateTime = null;
                lastProcessingSeconds = null;
                processingStatusTimer?.Dispose();
                processingStatusTimer = null;
            }
            
            // UIスレッドで強制的に更新
            try
            {
                InvokeAsync(StateHasChanged);
                Console.WriteLine("[UI Update] StateHasChanged実行完了");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[StateHasChanged Error] {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[UI Update] アクティブセッション {activeSessionId} が見つかりません");
        }
    }
    
    private void UpdateSessionProcessingStatus(int elapsedSeconds, string tokens, string direction)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
        if (session != null)
        {
            // Console.WriteLine($"[UI Update] セッション {activeSessionId} の処理状態を更新: {elapsedSeconds}秒, {tokens}トークン, {direction}");
            
            session.ProcessingElapsedSeconds = elapsedSeconds;
            session.ProcessingTokens = tokens;
            session.ProcessingDirection = direction;
            
            if (session.ProcessingStartTime == null)
            {
                session.ProcessingStartTime = DateTime.Now;
            }
            
            lastProcessingUpdateTime = DateTime.Now;
            
            // タイマーをリセット
            processingStatusTimer?.Dispose();
            processingStatusTimer = new System.Threading.Timer(
                CheckProcessingTimeout,
                null,
                TimeSpan.FromSeconds(5),
                Timeout.InfiniteTimeSpan
            );
            
            // UIスレッドで強制的に更新
            try
            {
                InvokeAsync(StateHasChanged);
                Console.WriteLine("[UI Update] StateHasChanged実行完了");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[StateHasChanged Error] {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[UI Update] アクティブセッション {activeSessionId} が見つかりません");
        }
    }

    private void CheckProcessingTimeout(object? state)
    {
        Console.WriteLine($"[Notification Debug] CheckProcessingTimeout呼び出し");
        Console.WriteLine($"[Notification Debug] lastProcessingUpdateTime: {lastProcessingUpdateTime}");
        
        if (lastProcessingUpdateTime.HasValue)
        {
            var elapsedTime = (DateTime.Now - lastProcessingUpdateTime.Value).TotalSeconds;
            Console.WriteLine($"[Notification Debug] 最後の更新からの経過時間: {elapsedTime}秒");
            
            if (elapsedTime >= 5)
            {
                // Console.WriteLine("[Claude Code Status] 5秒間更新がないため処理終了と判定");
                Console.WriteLine("[Notification Debug] UpdateSessionProcessingStatus(null)を呼び出し（タイムアウト）");
                InvokeAsync(() => UpdateSessionProcessingStatus(null));
            }
        }
        else
        {
            Console.WriteLine("[Notification Debug] lastProcessingUpdateTimeがnull");
        }
    }

    private async Task SendInput()
    {
        if (string.IsNullOrWhiteSpace(inputText) || activeSession == null)
            return;

        var currentSession = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
        if (currentSession == null)
            return;

        // テキストを送信
        await activeSession.WriteAsync(inputText);
        
        // 送信後にEnterキーを送信
        await SendEnterKeyDirect();
        
        // 入力フィールドをクリア
        inputText = "";
    }

    private async Task OnTextAreaKeyDown(KeyboardEventArgs e)
    {
        // Enter で送信（Shiftキーが押されていない場合）
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            shouldPreventDefault = true;
            await SendInput();
            shouldPreventDefault = false;
        }
        else
        {
            shouldPreventDefault = false;
        }
        // Shift+Enter は通常の改行動作（何もしない）
    }

    private string GetPlaceholderText(TerminalType terminalType)
    {
        return terminalType == TerminalType.ClaudeCode 
            ? "Claude Codeへのメッセージを入力..." 
            : "Gemini CLIへのメッセージを入力...";
    }

    private bool isEscapePressed = false;
    private bool isModeSwitchPressed = false;

    private async Task SendEscape()
    {
        if (activeSession == null)
            return;

        // ボタンの押下状態を表示
        isEscapePressed = true;

        // Escキーを送信（\x1B はESCのエスケープシーケンス）
        await activeSession.WriteAsync("\x1B");

        // 押下状態を解除
        await Task.Delay(TerminalConstants.ButtonPressAnimationDelay);
        isEscapePressed = false;
    }

    private async Task SendModeSwitch()
    {
        if (activeSession == null)
            return;

        // ボタンの押下状態を表示
        isModeSwitchPressed = true;

        // Alt+M を送信（\x1B はESC、m はM）
        await activeSession.WriteAsync("\x1Bm");

        // 押下状態を解除
        await Task.Delay(TerminalConstants.ButtonPressAnimationDelay);
        isModeSwitchPressed = false;
    }


    private async Task SendEnterKeyDirect()
    {
        if (activeSession == null)
            return;

        // 様々なEnterキーのパターンを試す
        // Windows環境では通常 \r\n だが、ターミナルによって異なる場合がある
        await activeSession.WriteAsync("\r");
    }


    public async ValueTask DisposeAsync()
    {
        var ctsToDispose = readCts;
        readCts = null;
        
        if (ctsToDispose != null)
        {
            try
            {
                ctsToDispose.Cancel();
            }
            finally
            {
                ctsToDispose.Dispose();
            }
        }
        
        if (activeTerminal != null)
        {
            await activeTerminal.DisposeAsync();
        }
        
        dotNetRef?.Dispose();
        
        // タイマーをクリーンアップ
        processingStatusTimer?.Dispose();
        
        // JavaScriptのイベントリスナーをクリーンアップ
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.cleanupKeyboardShortcuts");
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.cleanupDevWindowDrag");
        }
        catch (Exception)
        {
            // Dispose時のエラーは無視
        }
    }
}
