@page "/multisession"
@page "/"
@using TerminalHub.Components.Shared
@using TerminalHub.Components.Shared.Dialogs
@using TerminalHub.Constants
@using TerminalHub.Models
@using TerminalHub.Services
@using TerminalHub.Analyzers
@using Microsoft.JSInterop
@using Microsoft.Extensions.Configuration
@inject ISessionManager SessionManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject IConfiguration Configuration
@inject INotificationService NotificationService
@inject IOutputAnalyzerFactory AnalyzerFactory
@inject IGitService GitService
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>マルチセッション ターミナル</PageTitle>

<Toast @ref="toast" />
<SessionCreateDialog IsVisible="showCreateDialog" 
                    OnSessionCreate="OnSessionCreate" 
                    OnCancel="OnDialogCancel" />
<DevWindow @bind-IsVisible="showDevWindow" />
<SettingsDialog @bind-IsVisible="showSettingsDialog" />
<SubSessionDialog IsVisible="showSubSessionDialog" 
                         ParentSessionName="@subSessionParentSessionName"
                         ParentSessionId="@subSessionParentSessionId"
                         ParentSessionPath="@subSessionParentSessionPath"
                         IsGitRepository="@subSessionParentSessionIsGitRepository"
                         OnSubSessionOperation="OnSubSessionOperation" 
                         OnCancel="() => showSubSessionDialog = false" />
<SessionSettingsDialog IsVisible="showSessionSettingsDialog"
                       SessionId="@settingsSessionId"
                       OnSettingsSaved="OnSessionSettingsSaved"
                       OnCancel="() => showSessionSettingsDialog = false" />

<div class="container-fluid h-100">
    <div class="row h-100">
        <SessionList Sessions=@sessions
                     ActiveSessionId=@activeSessionId
                     IsAddingSession=@isAddingSession
                     EditingMemoSessionId=@editingMemoSessionId
                     TempMemoText=@tempMemoText
                     OnAddSession="AddSession"
                     OnSessionSelect="async (sessionId) => await SelectSession(sessionId)"
                     OnSessionRemove="async (sessionId) => await RemoveSession(sessionId)"
                     OnMemoInput="(text) => tempMemoText = text"
                     OnMemoSave="SaveMemo"
                     OnMemoKeyDown="HandleMemoKeyDown"
                     OnMemoEdit="StartEditingMemo"
                     OnSettingsClick="ShowSettings"
                     OnCreateWorktree="ShowWorktreeDialog"
                     OnSessionSettings="ShowSessionSettingsDialog"
                     OnGitStatusRefresh="RefreshGitStatus" />

        <div class="col-md-9 p-0 position-relative" style="height: 100vh; display: flex; flex-direction: column;">
            @if (activeSessionId != null)
            {
                <!-- ターミナル部分 (70%) -->
                <div style="height: 70%; overflow: hidden; position: relative;">
                    @if (!isMasterConnection)
                    {
                        <div class="alert alert-warning position-absolute top-0 start-50 translate-middle-x mt-2" 
                             style="z-index: 100; cursor: pointer;" 
                             @onclick="TakeMasterControl">
                            <i class="bi bi-eye"></i> スレーブモード - クリックして制御を取得
                        </div>
                    }
                    <div class="terminal-wrapper h-100">
                        @foreach (var session in sessions)
                        {
                            <div id="terminal-@session.SessionId" class="terminal-container" 
                                 style="display: @(session.SessionId == activeSessionId ? "block" : "none");"></div>
                        }
                    </div>
                </div>
                
                <!-- WebUI部分 (30%) -->
                <div style="height: 30%; overflow-y: auto; border-top: 1px solid #dee2e6; background-color: #f8f9fa;">
                    @{
                        var currentSession = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
                    }
                    @if (currentSession != null && (currentSession.TerminalType == TerminalType.ClaudeCode || currentSession.TerminalType == TerminalType.GeminiCLI))
                    {
                        <div class="p-3 h-100 d-flex flex-column">
                            
                            <div class="flex-grow-1 d-flex flex-column">
                                <textarea id="inputText" 
                                          class="form-control flex-grow-1" 
                                          data-input-area
                                          @bind="inputText"
                                          @bind:event="oninput"
                                          @onkeydown="OnTextAreaKeyDown"
                                          @onkeydown:preventDefault="@shouldPreventDefault"
                                          placeholder="@(GetPlaceholderText(currentSession.TerminalType))"
                                          style="resize: none; font-family: 'Consolas', 'Monaco', monospace;">
                                </textarea>
                                
                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                    <div>
                                        <kbd>Enter</kbd> で送信 | <kbd>Shift+Enter</kbd> で改行 | <kbd>Ctrl+↑↓</kbd> で履歴
                                    </div>
                                    <div class="btn-group">
                                        <button class="btn btn-secondary @(isCtrlCPressed ? "active" : "")" 
                                                @onclick="SendCtrlC" 
                                                title="強制中断 (Ctrl+C)"
                                                style="@(isCtrlCPressed ? "transform: scale(0.95);" : "")">
                                            <i class="bi bi-x-octagon"></i> Ctrl+C
                                        </button>
                                        <button class="btn btn-secondary @(isEscapePressed ? "active" : "")" 
                                                @onclick="SendEscape" 
                                                title="中断 (Esc)"
                                                style="@(isEscapePressed ? "transform: scale(0.95);" : "")">
                                            <i class="bi bi-stop-circle"></i> Esc
                                        </button>
                                        @if (currentSession.TerminalType == TerminalType.ClaudeCode)
                                        {
                                            <button class="btn btn-secondary @(isModeSwitchPressed ? "active" : "")" 
                                                    @onclick="SendModeSwitch" 
                                                    title="モード切替 (Alt+M)"
                                                    style="@(isModeSwitchPressed ? "transform: scale(0.95);" : "")">
                                                <i class="bi bi-arrow-repeat"></i> Alt+M
                                            </button>
                                        }
                                        @if (showDevButton)
                                        {
                                            <button class="btn btn-secondary" 
                                                    @onclick="() => showDevWindow = !showDevWindow" 
                                                    title="開発ツール">
                                                <i class="bi bi-code-square"></i> Dev
                                            </button>
                                        }
                                        <button class="btn btn-primary" @onclick="SendInput">
                                            <i class="bi bi-send"></i> 送信
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center text-muted">
                            <p>このセッションタイプではWebUIは使用できません</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        @if (sessions.Count == 0 && !isAddingSession)
                        {
                            <!-- 初回ロード中のスピナー -->
                            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">読み込み中...</span>
                            </div>
                            <p class="mt-3">セッションを読み込んでいます...</p>
                        }
                        else
                        {
                            <!-- セッション選択待ち -->
                            <i class="bi bi-terminal" style="font-size: 4rem;"></i>
                            <p class="mt-3">左側からセッションを選択してください</p>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private List<SessionInfo> sessions = new();
    private Guid? activeSessionId;
    private bool isAddingSession = false;
    private bool showCreateDialog = false;
    private IJSObjectReference? activeTerminal;
    private ConPtySession? activeSession;
    
    // テキスト履歴機能
    private List<string> inputHistory = new();
    private int historyIndex = -1;
    private Dictionary<Guid, CancellationTokenSource> sessionReadCts = new();
    private DotNetObjectReference<Root>? dotNetRef;
    private Toast? toast;
    private string inputText = "";
    private bool shouldPreventDefault = false;
    private Guid? editingMemoSessionId = null;
    private string tempMemoText = "";
    private bool showDevWindow = false;
    private bool showDevButton = false;
    private bool showSettingsDialog = false;
    private bool showSubSessionDialog = false;
    private string? subSessionParentSessionName = null;
    private Guid? subSessionParentSessionId = null;
    private string? connectionId = null;
    private bool isMasterConnection = false;
    private string? subSessionParentSessionPath = null;
    private bool subSessionParentSessionIsGitRepository = true;
    private bool showSessionSettingsDialog = false;
    private Guid? settingsSessionId = null;
    
    // 処理状態管理用（セッションごと）
    private Dictionary<Guid, System.Threading.Timer> sessionProcessingTimers = new();

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);

        // 接続IDを生成
        connectionId = Guid.NewGuid().ToString();

        // 開発モード設定を読み込み
        showDevButton = Configuration.GetValue<bool>("DevelopmentMode:ShowDevButton", false);
        showDevWindow = Configuration.GetValue<bool>("DevelopmentMode:ShowDevWindowOnStartup", false);
        
        // 通知権限をリクエスト（削除 - 設定モーダルに移動）
        // await NotificationService.RequestBrowserNotificationPermissionAsync();

        // テキスト履歴を読み込み
        await LoadInputHistoryAsync();
        
        // ローカルストレージからセッション情報を復元
        var savedSessions = await LocalStorageService.LoadSessionsAsync();
        var savedActiveId = await LocalStorageService.LoadActiveSessionIdAsync();

        // 保存されたセッション情報をSessionManagerに復元
        var restoredSessionIds = new HashSet<Guid>();
        foreach (var sessionInfo in savedSessions)
        {
            // 重複チェック（ホットリロード対策）
            var existingSession = SessionManager.GetSessionInfo(sessionInfo.SessionId);
            if (existingSession != null)
            {
                restoredSessionIds.Add(sessionInfo.SessionId);
                continue;
            }

            // セッションを再作成（ターミナルプロセスの起動）- 元のSessionIDを使用
            try
            {
                var newSession = await SessionManager.CreateSessionAsync(
                    sessionInfo.SessionId,
                    sessionInfo.FolderPath,
                    sessionInfo.DisplayName,
                    sessionInfo.TerminalType,
                    sessionInfo.Options);

                // メモ情報と親子関係を復元
                var createdSession = SessionManager.GetSessionInfo(newSession.SessionId);
                if (createdSession != null)
                {
                    if (!string.IsNullOrEmpty(sessionInfo.Memo))
                    {
                        createdSession.Memo = sessionInfo.Memo;
                    }
                    
                    // 親子関係を復元
                    if (sessionInfo.ParentSessionId.HasValue)
                    {
                        createdSession.ParentSessionId = sessionInfo.ParentSessionId;
                    }
                    
                    await SessionManager.SaveSessionInfoAsync(createdSession);
                }

                restoredSessionIds.Add(newSession.SessionId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to restore session {sessionInfo.SessionId}: {ex.Message}");
            }
        }

        sessions = SessionManager.GetAllSessions().ToList();

        // 保存されたアクティブセッションがあれば選択
        if (savedActiveId != null && sessions.Any(s => s.SessionId == savedActiveId))
        {
            await SelectSession(savedActiveId.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // キーボードショートカットを登録
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.setupKeyboardShortcuts", dotNetRef);
            // 通知用のDotNetRefを設定
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.setDotNetRef", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnShortcutNewSession()
    {
        await AddSession();
    }
    
    [JSInvokable]
    public async Task OnNotificationClick(string sessionId)
    {
        if (Guid.TryParse(sessionId, out var guid))
        {
            await SelectSession(guid);
        }
    }

    private async Task AddSession()
    {
        showCreateDialog = true;
        await Task.CompletedTask; // 必要に応じて非同期処理を追加
    }
    
    private void ShowSettings()
    {
        showSettingsDialog = true;
    }

    private async Task OnSessionCreate(SessionCreateDialog.SessionCreateResult result)
    {
        showCreateDialog = false;
        isAddingSession = true;

        try
        {
            var sessionInfo = await SessionManager.CreateSessionAsync(
                result.FolderPath, 
                "", // セッション名は空（フォルダ名を使用）
                result.TerminalType, 
                result.Options);

            sessions = SessionManager.GetAllSessions().ToList();

            // ローカルストレージに保存
            await LocalStorageService.SaveSessionsAsync(sessions);

            StateHasChanged();

            await Task.Delay(TerminalConstants.DomUpdateDelay);
            await SelectSession(sessionInfo.SessionId);
        }
        catch (Exception ex)
        {
            toast?.ShowError($"セッション作成エラー: {ex.Message}");
        }
        finally
        {
            isAddingSession = false;
        }
    }

    private void OnDialogCancel()
    {
        showCreateDialog = false;
    }


    private async Task SelectSession(Guid sessionId)
    {
        if (activeSessionId == sessionId)
        {
            return;
        }

        // 前のセッションの処理は継続させるため、キャンセルしない

        // 既存のアクティブターミナルを破棄
        if (activeTerminal != null)
        {
            try
            {
                await activeTerminal.DisposeAsync();
            }
            catch (Exception)
            {
                // Console.WriteLine($"[SelectSession] ターミナル破棄エラー: {ex.Message}");
            }
            activeTerminal = null;
        }

        // すべてのターミナルを非表示にする（JavaScriptで直接制御）
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.hideAllTerminals");
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // セッションをアクティブに
        await SessionManager.SetActiveSessionAsync(sessionId);
        activeSessionId = sessionId;
        // 再起動後の新しいセッションを確実に取得
        activeSession = SessionManager.GetSession(sessionId);
        
        // セッションが存在しない場合はエラー
        if (activeSession == null)
        {
            Console.WriteLine($"[SelectSession] セッション {sessionId} が見つかりません");
            activeSessionId = null;
            return;
        }

        // 既存の接続を解除（別のセッションから切り替えた場合）
        if (connectionId != null)
        {
            SessionManager.UnregisterConnection(connectionId);
        }

        // 新しいセッションに接続を登録
        if (connectionId != null && activeSessionId.HasValue)
        {
            SessionManager.RegisterConnection(connectionId, activeSessionId.Value);
            isMasterConnection = SessionManager.IsMasterConnection(connectionId);
            Console.WriteLine($"[Connection] 接続 {connectionId} をセッション {activeSessionId.Value} に登録 (マスター: {isMasterConnection})");
        }
        
        // 通知フラグをクリア
        var selectedSession = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (selectedSession != null && selectedSession.HasNotificationPending)
        {
            selectedSession.HasNotificationPending = false;
            //Console.WriteLine($"[Notification Debug] セッション {sessionId} の通知フラグをクリア");
        }

        // アクティブセッション変更を即座にUIに反映
        StateHasChanged();

        // アクティブセッションIDをローカルストレージに保存
        await LocalStorageService.SaveActiveSessionIdAsync(sessionId);

        // ターミナルdivが存在するか確認し、表示する
        try
        {
            var divExists = await JSRuntime.InvokeAsync<bool>("terminalHubHelpers.checkElementExists", 
                $"terminal-{sessionId.ToString()}");

            if (divExists)
            {
                // 新しいターミナルを表示
                await JSRuntime.InvokeVoidAsync("terminalFunctions.showTerminal", sessionId.ToString());
            }
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // ターミナルを初期化
        await InitializeTerminal(sessionId);

        // ターミナルのリサイズを強制的に実行
        try
        {
            if (activeTerminal != null)
            {
                await activeTerminal.InvokeVoidAsync("resize");
            }
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // バッファに蓄積された出力をターミナルに再生
        var selectedSessionInfo = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (selectedSessionInfo != null && selectedSessionInfo.OutputBuffer.Count > 0)
        {
            await Task.Delay(100); // ターミナル初期化完了を待つ
            
            lock (selectedSessionInfo.BufferLock)
            {
                if (activeTerminal != null && selectedSessionInfo.OutputBuffer.Count > 0)
                {
                    if (isMasterConnection)
                    {
                        // マスターの場合のみバッファの内容を書き込み（画面高さの2倍制限付き）
                        var bufferedData = string.Join("", selectedSessionInfo.OutputBuffer);
                        _ = activeTerminal.InvokeVoidAsync("terminalFunctions.writeBuffered", activeSessionId, bufferedData);
                        
                        // バッファをクリア
                        selectedSessionInfo.OutputBuffer.Clear();
                    }
                    else
                    {
                        // スレーブの場合はバッファをクリアせず、後でマスターになった時に使用
                        Console.WriteLine($"[Connection] スレーブモードのためバッファ書き込みをスキップ: {selectedSessionInfo.OutputBuffer.Count}件");
                    }
                }
            }
        }

        // 出力読み取りを開始（マスターの場合のみ、既存のものがなければ）
        if (activeSession != null && !sessionReadCts.ContainsKey(sessionId) && isMasterConnection)
        {
            var cts = new CancellationTokenSource();
            sessionReadCts[sessionId] = cts;
            _ = Task.Run(() => ReadSessionOutput(sessionId, cts.Token));
        }

        // ターミナルを最下段にスクロール
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.scrollToBottom", sessionId.ToString());
        }
        catch (Exception)
        {
            // エラーは無視
        }

        // テキストエリアにフォーカス
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.focusTextArea");
        }
        catch (Exception)
        {
            // エラーは無視
        }
    }

    private async Task InitializeTerminal(Guid sessionId)
    {
        var terminalId = $"terminal-{sessionId.ToString()}";
        // Console.WriteLine($"[InitializeTerminal] 開始: terminalId={terminalId}");

        // JavaScript側の既存ターミナルも削除
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalFunctions.cleanupTerminal", sessionId.ToString());
        }
        catch { }

        // Console.WriteLine($"[InitializeTerminal] 新しいターミナルを作成");
        try
        {
            activeTerminal = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "terminalFunctions.createMultiSessionTerminal", 
                terminalId, 
                sessionId.ToString(), 
                dotNetRef);

            // Console.WriteLine($"[InitializeTerminal] ターミナル作成成功");
        }
        catch (Exception)
        {
            // Console.WriteLine($"[InitializeTerminal] ターミナル作成エラー: {ex.Message}");
        }
    }

    private async Task ReadSessionOutput(Guid sessionId, CancellationToken cancellationToken)
    {
        // Console.WriteLine($"[ReadSessionOutput] 開始: sessionId={sessionId}");

        var session = SessionManager.GetSession(sessionId);
        if (session == null)
        {
            // Console.WriteLine($"[ReadSessionOutput] セッションが見つからない: {sessionId}");
            return;
        }

        var buffer = new char[TerminalConstants.DefaultBufferSize];

        while (!cancellationToken.IsCancellationRequested)
        {
            try
            {
                // キャンセルが要求されているか再確認
                if (cancellationToken.IsCancellationRequested)
                    break;

                var charsRead = await session.ReadAsync(buffer, 0, buffer.Length);
                if (charsRead > 0)
                {
                    // データ書き込み前に再度キャンセルを確認
                    if (cancellationToken.IsCancellationRequested)
                        break;

                    var data = new string(buffer, 0, charsRead);
                    // Console.WriteLine($"[ReadSessionOutput] セッション {sessionId} に {charsRead} 文字書き込み");

                    var sessionInfo = sessions.FirstOrDefault(s => s.SessionId == sessionId);
                    if (sessionInfo != null)
                    {
                        // Claude Codeの場合、"No conversation found to continue"エラーをチェック
                        if (sessionInfo.TerminalType == TerminalType.ClaudeCode && 
                            data.Contains("No conversation found to continue") &&
                            sessionInfo.Options.ContainsKey("continue") &&
                            !sessionInfo.HasContinueErrorOccurred)
                        {
                            Console.WriteLine($"[Claude Continue Error] セッション {sessionId} で 'No conversation found to continue' エラーを検知しました");
                            
                            // フラグを設定して重複送信を防ぐ
                            sessionInfo.HasContinueErrorOccurred = true;
                            
                            // 既存のセッションに--continueなしでclaudeを起動
                            _ = Task.Run(async () =>
                            {
                                try
                                {
                                    await StartClaudeWithoutContinue(sessionId);
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine($"[Claude Continue Error] Claude起動エラー: {ex.Message}");
                                }
                            });
                            
                            continue; // 通常の処理をスキップ
                        }

                        // 出力解析（ターミナルタイプに応じた解析器を使用）
                        AnalyzeOutput(data, sessionId, sessionInfo.TerminalType);

                        // アクティブセッションはターミナルに直接書き込み
                        if (activeSessionId == sessionId && activeTerminal != null)
                        {
                            await activeTerminal.InvokeVoidAsync("write", data);
                        }
                        else
                        {
                            // 非アクティブセッションはバッファに保存
                            lock (sessionInfo.BufferLock)
                            {
                                sessionInfo.OutputBuffer.Enqueue(data);
                                
                                // バッファサイズ制限（古いデータから削除）
                                while (sessionInfo.OutputBuffer.Count > sessionInfo.MaxBufferSize)
                                {
                                    sessionInfo.OutputBuffer.Dequeue();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                if (!cancellationToken.IsCancellationRequested)
                {
                    // Console.WriteLine($"[ReadOutput] 読み取りエラー: {ex.Message}");
                }
                break;
            }
        }

        // Console.WriteLine($"[ReadOutput] 終了: sessionId={localSessionId}");
    }

    private void StartEditingMemo(Guid sessionId, string currentMemo)
    {
        editingMemoSessionId = sessionId;
        tempMemoText = currentMemo ?? "";
        StateHasChanged();
    }

    private async Task SaveMemo(Guid sessionId)
    {
        if (editingMemoSessionId == sessionId)
        {
            await UpdateSessionMemo(sessionId, tempMemoText);
            editingMemoSessionId = null;
            tempMemoText = "";
            StateHasChanged();
        }
    }

    private async Task HandleMemoKeyDown(KeyboardEventArgs e, Guid sessionId)
    {
        if (e.Key == "Enter")
        {
            await SaveMemo(sessionId);
        }
        else if (e.Key == "Escape")
        {
            editingMemoSessionId = null;
            tempMemoText = "";
            StateHasChanged();
        }
    }

    private async Task UpdateSessionMemo(Guid sessionId, string memo)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            session.Memo = memo;
            // ローカルストレージを更新
            await LocalStorageService.SaveSessionsAsync(sessions);
        }
    }

    private async Task RemoveSession(Guid sessionId)
    {
        // バッファのクリーンアップ
        var sessionToRemove = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (sessionToRemove != null)
        {
            lock (sessionToRemove.BufferLock)
            {
                sessionToRemove.OutputBuffer.Clear();
            }
        }
        
        // セッションのタイマーを停止
        StopSessionTimer(sessionId);

        // セッションの読み取りタスクを停止
        if (sessionReadCts.TryGetValue(sessionId, out var cts))
        {
            try
            {
                cts.Cancel();
                cts.Dispose();
            }
            finally
            {
                sessionReadCts.Remove(sessionId);
            }
        }

        // アクティブセッションの場合の追加処理
        if (sessionId == activeSessionId)
        {

            if (activeTerminal != null)
            {
                await activeTerminal.DisposeAsync();
                activeTerminal = null;
            }
        }

        // ターミナルのクリーンアップはdestroyTerminalで処理される

        await SessionManager.RemoveSessionAsync(sessionId);
        sessions = SessionManager.GetAllSessions().ToList();

        // ローカルストレージを更新
        await LocalStorageService.SaveSessionsAsync(sessions);

        if (activeSessionId == sessionId)
        {
            activeSessionId = null;
            activeSession = null;

            // セッション削除を即座にUIに反映
            StateHasChanged();

            await LocalStorageService.SaveActiveSessionIdAsync(null);

            // 他のセッションがあれば最初のものを選択
            if (sessions.Any())
            {
                await SelectSession(sessions.First().SessionId);
            }
        }
        else
        {
            // 削除されたセッションがアクティブでない場合もUIを更新
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task SendInput(string sessionId, string data)
    {
        // スレーブモードの場合は入力を無視
        if (!isMasterConnection)
        {
            Console.WriteLine($"[Connection] スレーブモードのため入力を無視: {data.Length}文字");
            return;
        }

        var guid = Guid.Parse(sessionId);
        if (activeSession != null && guid == activeSessionId)
        {
            await activeSession.WriteAsync(data);
        }
    }

    [JSInvokable]
    public void OnTerminalSizeChanged(string sessionId, int cols, int rows)
    {
        // スレーブモードの場合はリサイズを無視
        if (!isMasterConnection)
        {
            Console.WriteLine($"[Connection] スレーブモードのためリサイズを無視: {cols}x{rows}");
            return;
        }

        var guid = Guid.Parse(sessionId);
        if (guid == activeSessionId && activeSession != null)
        {
            activeSession.Resize(cols, rows);
        }
    }

    private async Task DestroyTerminal(Guid sessionId, bool showAlert = true)
    {
        // Console.WriteLine($"[DestroyTerminal] セッション {sessionId} のターミナルを破棄");

        try
        {
            // JavaScript側のターミナルを破棄
            await JSRuntime.InvokeVoidAsync("terminalFunctions.destroyTerminal", sessionId.ToString());

            // C#側のターミナル参照を削除（アクティブセッションの場合のみ）
            if (activeSessionId == sessionId && activeTerminal != null)
            {
                await activeTerminal.DisposeAsync();
                activeTerminal = null;
                // Console.WriteLine($"[DestroyTerminal] C#側のターミナル参照を削除");
            }

            // セッションの読み取り処理を停止（非アクティブでも）
            if (sessionReadCts.TryGetValue(sessionId, out var cts))
            {
                cts.Cancel();
                cts.Dispose();
                sessionReadCts.Remove(sessionId);
                // Console.WriteLine($"[DestroyTerminal] 読み取り処理を停止");
            }

            if (showAlert)
            {
                toast?.ShowSuccess("ターミナルを破棄しました");
            }
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"[DestroyTerminal] エラー: {ex.Message}");
            if (showAlert)
            {
                toast?.ShowError($"ターミナル破棄エラー: {ex.Message}");
            }
        }
    }

    private async Task RecreateTerminal(Guid sessionId)
    {
        // Console.WriteLine($"[RecreateTerminal] セッション {sessionId} のターミナルを再作成");

        try
        {
            // セッションがアクティブな場合のみ再作成
            if (activeSessionId == sessionId)
            {
                // 既存のターミナルを破棄（アラートなし）
                await DestroyTerminal(sessionId, false);

                // DOM更新と読み取りタスクの完全な終了を待つ
                await Task.Delay(TerminalConstants.SessionCreationDelay);

                // ターミナルdivの表示状態を確実に設定
                await JSRuntime.InvokeVoidAsync("terminalFunctions.ensureTerminalVisible", sessionId.ToString());

                // 新しいターミナルを初期化
                await InitializeTerminal(sessionId);

                // 読み取り処理を再開（マスターの場合のみ、既存のものがなければ）
                if (activeSession != null && !sessionReadCts.ContainsKey(sessionId) && isMasterConnection)
                {
                    var cts = new CancellationTokenSource();
                    sessionReadCts[sessionId] = cts;
                    _ = Task.Run(() => ReadSessionOutput(sessionId, cts.Token));

                    // ターミナルに初期プロンプトを送信して接続を確認
                    if (activeTerminal != null)
                    {
                        // Enterキーを送信してプロンプトを表示
                        await activeSession.WriteAsync("\r\n");
                        // Console.WriteLine($"[RecreateTerminal] プロンプト送信完了");
                    }
                }

                toast?.ShowSuccess("ターミナルを再作成しました");
            }
            else
            {
                toast?.ShowWarning("このセッションを選択してからターミナルを再作成してください");
            }
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"[RecreateTerminal] エラー: {ex.Message}");
            toast?.ShowError($"ターミナル再作成エラー: {ex.Message}");
        }
    }



    private void AnalyzeOutput(string data, Guid sessionId, TerminalType terminalType)
    {
        try
        {
            // ターミナルタイプに応じた解析器を取得
            var analyzer = AnalyzerFactory.GetAnalyzer(terminalType);
            if (analyzer == null)
            {
                // 解析器がない場合は何もしない
                return;
            }

            // 解析を実行
            if (analyzer.TryAnalyze(data, out var result))
            {
                var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
                if (session == null) return;

                if (result.IsInterrupted)
                {
                    // 処理が中断された
                    UpdateSessionProcessingStatus(sessionId, null);
                }
                else if (result.IsProcessing)
                {
                    // ユーザー入力待ち状態をセッションに設定
                    session.IsWaitingForUserInput = result.IsWaitingForUser;
                    
                    // 処理中
                    if (result.ElapsedSeconds.HasValue)
                    {
                        // 秒数の変化をチェック
                        var secondsStr = result.ElapsedSeconds.Value.ToString();
                        if (session.LastProcessingSeconds == secondsStr)
                        {
                            // 秒数が変わらない場合はタイマーのリセットのみ
                            session.LastProcessingUpdateTime = DateTime.Now;
                            ResetSessionTimer(sessionId);
                            return;
                        }
                        
                        session.LastProcessingSeconds = secondsStr;
                        
                        // GeminiCLIの場合はステータステキストも含める
                        if (!string.IsNullOrEmpty(result.StatusText))
                        {
                            UpdateSessionProcessingStatus(sessionId, result.StatusText, result.ElapsedSeconds.Value, 
                                result.Tokens ?? "", result.Direction ?? "");
                        }
                        else
                        {
                            UpdateSessionProcessingStatus(sessionId, result.ElapsedSeconds.Value, 
                                result.Tokens ?? "", result.Direction ?? "");
                        }
                    }
                    else if (!string.IsNullOrEmpty(result.StatusText))
                    {
                        // ステータステキストのみの更新
                        UpdateSessionProcessingStatus(sessionId, result.StatusText);
                    }
                }
                else
                {
                    // 処理完了
                    UpdateSessionProcessingStatus(sessionId, null);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Output Analysis Error] {terminalType}: {ex.Message}");
        }
    }

    private void UpdateSessionProcessingStatus(Guid sessionId, string? statusText)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            // Console.WriteLine($"[UI Update] セッション {activeSessionId} の処理状態を更新: {statusText ?? "null"}");
            
            session.ProcessingStatus = statusText;
            if (statusText != null)
            {
                session.ProcessingStartTime = DateTime.Now;
                session.LastProcessingUpdateTime = DateTime.Now;
                
                // セッションごとのタイマーをリセット
                ResetSessionTimer(sessionId);
            }
            else
            {
                //Console.WriteLine($"[Notification Debug] UpdateSessionProcessingStatus - 処理完了を検出");
                //Console.WriteLine($"[Notification Debug] ProcessingElapsedSeconds: {session.ProcessingElapsedSeconds}");
                
                // 処理完了時の通知
                if (session.ProcessingElapsedSeconds.HasValue)
                {
                    //Console.WriteLine($"[Notification Debug] 通知サービスを呼び出し中 - {session.ProcessingElapsedSeconds.Value}秒");
                    
                    // 通知フラグを設定（アクティブでない場合のみ）
                    if (activeSessionId != session.SessionId)
                    {
                        session.HasNotificationPending = true;
                        //Console.WriteLine($"[Notification Debug] セッション {session.SessionId} に通知フラグを設定");
                    }
                    
                    // セッション情報をコピー（非同期処理で使用するため）
                    var sessionCopy = new SessionInfo
                    {
                        SessionId = session.SessionId,
                        DisplayName = session.DisplayName,
                        FolderPath = session.FolderPath,
                        FolderName = session.FolderName,
                        CreatedAt = session.CreatedAt,
                        LastAccessedAt = session.LastAccessedAt,
                        IsActive = session.IsActive,
                        TerminalType = session.TerminalType,
                        Options = session.Options,
                        Memo = session.Memo
                    };
                    var elapsedSecondsCopy = session.ProcessingElapsedSeconds.Value;
                    
                    _ = Task.Run(async () => 
                    {
                        try
                        {
                            //Console.WriteLine($"[Notification Debug] NotifyProcessingCompleteAsync呼び出し開始");
                            //Console.WriteLine($"[Notification Debug] SessionCopy - Id: {sessionCopy.SessionId}, FolderPath: {sessionCopy.FolderPath}");
                            await NotificationService.NotifyProcessingCompleteAsync(sessionCopy, elapsedSecondsCopy);
                            //Console.WriteLine($"[Notification Debug] NotifyProcessingCompleteAsync呼び出し完了");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"[Notification Debug] 通知エラー: {ex.Message}");
                            Console.WriteLine($"[Notification Debug] スタックトレース: {ex.StackTrace}");
                        }
                    });
                }
                else
                {
                    //Console.WriteLine($"[Notification Debug] ProcessingElapsedSecondsがnullのため通知をスキップ");
                }
                
                session.ProcessingStartTime = null;
                session.ProcessingElapsedSeconds = null;
                session.ProcessingTokens = null;
                session.ProcessingDirection = null;
                session.LastProcessingUpdateTime = null;
                session.LastProcessingSeconds = null;
                session.IsWaitingForUserInput = false;
                
                // セッションのタイマーを停止
                StopSessionTimer(sessionId);
                
                // AIツール完了時にGitステータスを自動更新
                if (session.IsGitRepository)
                {
                    _ = Task.Run(async () =>
                    {
                        try
                        {
                            await RefreshGitStatus(sessionId);
                            Console.WriteLine($"[Git Auto Refresh] セッション {sessionId} のGitステータスを更新しました");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"[Git Auto Refresh] Gitステータス更新エラー: {ex.Message}");
                        }
                    });
                }
            }
            
            // UIスレッドで強制的に更新
            try
            {
                InvokeAsync(StateHasChanged);
                //Console.WriteLine("[UI Update] StateHasChanged実行完了");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[StateHasChanged Error] {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[UI Update] アクティブセッション {activeSessionId} が見つかりません");
        }
    }
    
    private void UpdateSessionProcessingStatus(Guid sessionId, int elapsedSeconds, string tokens, string direction)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            // Console.WriteLine($"[UI Update] セッション {activeSessionId} の処理状態を更新: {elapsedSeconds}秒, {tokens}トークン, {direction}");
            
            session.ProcessingElapsedSeconds = elapsedSeconds;
            session.ProcessingTokens = tokens;
            session.ProcessingDirection = direction;
            
            if (session.ProcessingStartTime == null)
            {
                session.ProcessingStartTime = DateTime.Now;
            }
            
            session.LastProcessingUpdateTime = DateTime.Now;
            
            // セッションごとのタイマーをリセット
            ResetSessionTimer(sessionId);
            
            // UIスレッドで強制的に更新
            try
            {
                InvokeAsync(StateHasChanged);
                //Console.WriteLine("[UI Update] StateHasChanged実行完了");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[StateHasChanged Error] {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[UI Update] アクティブセッション {activeSessionId} が見つかりません");
        }
    }
    
    private void UpdateSessionProcessingStatus(Guid sessionId, string statusText, int elapsedSeconds, string tokens, string direction)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            session.ProcessingStatus = statusText;
            session.ProcessingElapsedSeconds = elapsedSeconds;
            session.ProcessingTokens = tokens;
            session.ProcessingDirection = direction;
            
            if (session.ProcessingStartTime == null)
            {
                session.ProcessingStartTime = DateTime.Now;
            }
            
            session.LastProcessingUpdateTime = DateTime.Now;
            
            // セッションごとのタイマーをリセット
            ResetSessionTimer(sessionId);
            
            // UIスレッドで強制的に更新
            try
            {
                InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[StateHasChanged Error] {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[UI Update] セッション {sessionId} が見つかりません");
        }
    }

    private void ResetSessionTimer(Guid sessionId)
    {
        // 既存のタイマーを停止
        StopSessionTimer(sessionId);
        
        // 新しいタイマーを作成
        var timer = new System.Threading.Timer(
            (state) => CheckSessionTimeout(sessionId),
            null,
            TimeSpan.FromSeconds(5),
            Timeout.InfiniteTimeSpan
        );
        
        sessionProcessingTimers[sessionId] = timer;
    }
    
    private void StopSessionTimer(Guid sessionId)
    {
        if (sessionProcessingTimers.TryGetValue(sessionId, out var timer))
        {
            timer?.Dispose();
            sessionProcessingTimers.Remove(sessionId);
        }
    }
    
    private void CheckSessionTimeout(Guid sessionId)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null && session.LastProcessingUpdateTime.HasValue)
        {
            // ユーザー入力待ち状態の場合はタイムアウトしない
            if (session.IsWaitingForUserInput)
            {
                // タイマーを再設定して後でまた確認
                ResetSessionTimer(sessionId);
                return;
            }
            
            var elapsedTime = (DateTime.Now - session.LastProcessingUpdateTime.Value).TotalSeconds;
            
            if (elapsedTime >= 5)
            {
                // Console.WriteLine($"[Claude Code Status] セッション {sessionId} で5秒間更新がないため処理終了と判定");
                InvokeAsync(() => UpdateSessionProcessingStatus(sessionId, null));
            }
        }
    }

    private async Task SendInput()
    {
        if (activeSession == null || !isMasterConnection)
            return;

        var currentSession = sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
        if (currentSession == null)
            return;

        // テキストがある場合は送信
        if (!string.IsNullOrWhiteSpace(inputText))
        {
            // テキスト履歴に追加
            AddToInputHistory(inputText);
            
            await activeSession.WriteAsync(inputText);
            
            // テキスト送信後、Enter送信前に0.2秒待機
            await Task.Delay(200);
        }
        
        // Enterキーを送信（空の場合でも送信）
        await SendEnterKeyDirect();
        
        // 入力フィールドをクリア
        inputText = "";
    }

    private async Task OnTextAreaKeyDown(KeyboardEventArgs e)
    {
        // Enter で送信（Shiftキーが押されていない場合）
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            shouldPreventDefault = true;
            await SendInput();
            shouldPreventDefault = false;
        }
        // 履歴機能: 上矢印で前の履歴、下矢印で次の履歴
        else if (e.Key == "ArrowUp" && e.CtrlKey)
        {
            shouldPreventDefault = true;
            NavigateHistory(-1);
        }
        else if (e.Key == "ArrowDown" && e.CtrlKey)
        {
            shouldPreventDefault = true;
            NavigateHistory(1);
        }
        else
        {
            shouldPreventDefault = false;
        }
        // Shift+Enter は通常の改行動作（何もしない）
    }

    private string GetPlaceholderText(TerminalType terminalType)
    {
        return terminalType == TerminalType.ClaudeCode 
            ? "Claude Codeへのメッセージを入力..." 
            : "Gemini CLIへのメッセージを入力...";
    }

    private bool isEscapePressed = false;
    private bool isModeSwitchPressed = false;
    private bool isCtrlCPressed = false;

    private async Task SendCtrlC()
    {
        if (activeSession == null || !isMasterConnection)
            return;

        // ボタンの押下状態を表示
        isCtrlCPressed = true;

        // Ctrl+Cを送信（\x03 はCtrl+Cの制御文字）
        await activeSession.WriteAsync("\x03");

        // 押下状態を解除
        await Task.Delay(TerminalConstants.ButtonPressAnimationDelay);
        isCtrlCPressed = false;
    }

    private async Task SendEscape()
    {
        if (activeSession == null || !isMasterConnection)
            return;

        // ボタンの押下状態を表示
        isEscapePressed = true;

        // Escキーを送信（\x1B はESCのエスケープシーケンス）
        await activeSession.WriteAsync("\x1B");

        // 押下状態を解除
        await Task.Delay(TerminalConstants.ButtonPressAnimationDelay);
        isEscapePressed = false;
    }

    private async Task SendModeSwitch()
    {
        if (activeSession == null || !isMasterConnection)
            return;

        // ボタンの押下状態を表示
        isModeSwitchPressed = true;

        // Alt+M を送信（\x1B はESC、m はM）
        await activeSession.WriteAsync("\x1Bm");

        // 押下状態を解除
        await Task.Delay(TerminalConstants.ButtonPressAnimationDelay);
        isModeSwitchPressed = false;
    }


    private void ShowWorktreeDialog(Guid sessionId)
    {
        var session = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session != null)
        {
            // Git管理されていない場合でも、サブセッションダイアログは表示する
            // （同じフォルダで開くオプションは利用可能）
            subSessionParentSessionId = sessionId;
            subSessionParentSessionName = session.GetDisplayName();
            subSessionParentSessionPath = session.FolderPath;
            subSessionParentSessionIsGitRepository = session.IsGitRepository;
            showSubSessionDialog = true;
        }
    }

    private async Task OnSubSessionOperation(SubSessionDialog.SubSessionResult result)
    {
        if (!subSessionParentSessionId.HasValue)
        {
            showSubSessionDialog = false;
            return;
        }

        try
        {
            SessionInfo? newSession = null;
            
            switch (result.OperationType)
            {
                case SubSessionDialog.SubSessionType.CreateNew:
                    // 新規Worktree作成
                    if (result.UseExistingBranch)
                    {
                        // 既存ブランチでWorktree作成
                        newSession = await SessionManager.CreateWorktreeSessionWithExistingBranchAsync(
                            subSessionParentSessionId.Value, result.BranchName, result.TerminalType, result.Options);
                    }
                    else
                    {
                        // 新規ブランチでWorktree作成
                        newSession = await SessionManager.CreateWorktreeSessionAsync(
                            subSessionParentSessionId.Value, result.BranchName, result.TerminalType, result.Options);
                    }
                    break;
                    
                case SubSessionDialog.SubSessionType.AddExisting:
                    // 既存Worktree追加
                    if (!string.IsNullOrEmpty(result.WorktreePath))
                    {
                        newSession = await AddExistingWorktreeSession(subSessionParentSessionId.Value, result.WorktreePath, result.BranchName, result.TerminalType, result.Options);
                    }
                    break;
                    
                case SubSessionDialog.SubSessionType.SamePath:
                    // 同じフォルダでセッション作成
                    if (!string.IsNullOrEmpty(subSessionParentSessionPath))
                    {
                        newSession = await SessionManager.CreateSamePathSessionAsync(
                            subSessionParentSessionId.Value, subSessionParentSessionPath, result.TerminalType, result.Options);
                    }
                    break;
                    
                case SubSessionDialog.SubSessionType.NewFolder:
                    // 新しいフォルダでセッション作成
                    if (!string.IsNullOrEmpty(result.WorktreePath))
                    {
                        newSession = await CreateNewFolderSession(
                            subSessionParentSessionId.Value, result.WorktreePath, result.TerminalType, result.Options);
                    }
                    break;
            }
            
            if (newSession != null)
            {
                // セッション一覧を更新
                sessions = SessionManager.GetAllSessions().ToList();
                
                // ローカルストレージに保存
                await LocalStorageService.SaveSessionsAsync(sessions);
                
                // 新しいセッションを選択
                await SelectSession(newSession.SessionId);
                
                string successMessage = result.OperationType switch
                {
                    SubSessionDialog.SubSessionType.CreateNew => 
                        $"Worktree '{result.BranchName}' を作成しました",
                    SubSessionDialog.SubSessionType.AddExisting => 
                        $"既存のWorktree '{result.BranchName}' を追加しました",
                    SubSessionDialog.SubSessionType.SamePath => 
                        $"新しい{GetSessionTypeName(result.TerminalType)}セッションを作成しました",
                    SubSessionDialog.SubSessionType.NewFolder => 
                        $"新しいフォルダ '{result.WorktreePath}' でセッションを作成しました",
                    _ => "セッションを作成しました"
                };
                
                toast?.ShowSuccess(successMessage);
            }
            else
            {
                toast?.ShowError("セッション作成に失敗しました");
            }
        }
        catch (Exception ex)
        {
            toast?.ShowError($"セッション作成エラー: {ex.Message}");
        }
        finally
        {
            showSubSessionDialog = false;
            subSessionParentSessionId = null;
            subSessionParentSessionName = null;
            subSessionParentSessionPath = null;
            subSessionParentSessionIsGitRepository = true;
        }
    }
    
    private string GetSessionTypeName(TerminalType terminalType)
    {
        return terminalType switch
        {
            TerminalType.Terminal => "ターミナル",
            TerminalType.ClaudeCode => "Claude Code",
            TerminalType.GeminiCLI => "Gemini CLI",
            _ => "セッション"
        };
    }
    
    private async Task<SessionInfo?> AddExistingWorktreeSession(Guid parentSessionId, string worktreePath, string branchName, TerminalType terminalType, Dictionary<string, string> options)
    {
        // 親セッション情報を取得
        var parentSession = SessionManager.GetSessionInfo(parentSessionId);
        if (parentSession == null)
            return null;
            
        // 既存のWorktreeをセッションとして追加（統一された表示名を使用）
        var sessionInfo = await SessionManager.CreateSessionAsync(
            worktreePath,
            $"{parentSession.DisplayName} ({branchName})",
            terminalType,
            options
        );
        
        // 親子関係を設定
        if (sessionInfo != null)
        {
            sessionInfo.ParentSessionId = parentSessionId;
            await SessionManager.SaveSessionInfoAsync(sessionInfo);
        }
        
        return sessionInfo;
    }
    
    private async Task<SessionInfo?> CreateNewFolderSession(Guid parentSessionId, string folderPath, TerminalType terminalType, Dictionary<string, string> options)
    {
        try
        {
            // 親セッション情報を取得
            var parentSession = SessionManager.GetSessionInfo(parentSessionId);
            if (parentSession == null)
                return null;
                
            // フォルダが存在しない場合は作成
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            
            // 新しいフォルダでセッション作成（統一された表示名を使用）
            var sessionInfo = await SessionManager.CreateSessionAsync(
                folderPath,
                $"{parentSession.DisplayName} ({Path.GetFileName(folderPath)})",
                terminalType,
                options
            );
            
            // 親子関係を設定
            if (sessionInfo != null)
            {
                sessionInfo.ParentSessionId = parentSessionId;
                await SessionManager.SaveSessionInfoAsync(sessionInfo);
            }
            
            return sessionInfo;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[CreateNewFolderSession] エラー: {ex.Message}");
            return null;
        }
    }


    private async Task SendEnterKeyDirect()
    {
        if (activeSession == null)
            return;

        // 様々なEnterキーのパターンを試す
        // Windows環境では通常 \r\n だが、ターミナルによって異なる場合がある
        await activeSession.WriteAsync("\r");
    }

    
    // テキスト履歴関連メソッド
    private void AddToInputHistory(string text)
    {
        // 空白やnullは履歴に追加しない
        if (string.IsNullOrWhiteSpace(text))
            return;
            
        // 同じテキストが連続する場合は追加しない
        if (inputHistory.Count > 0 && inputHistory[inputHistory.Count - 1] == text)
            return;
            
        inputHistory.Add(text);
        
        // 履歴の最大数を制限（100件）
        if (inputHistory.Count > 100)
        {
            inputHistory.RemoveAt(0);
        }
        
        // 履歴インデックスをリセット
        historyIndex = -1;
    }
    
    private void NavigateHistory(int direction)
    {
        if (inputHistory.Count == 0)
            return;
            
        // 初回の履歴操作時
        if (historyIndex == -1)
        {
            if (direction < 0) // 上矢印（古い履歴へ）
            {
                historyIndex = inputHistory.Count - 1;
                inputText = inputHistory[historyIndex];
            }
            return;
        }
        
        // 履歴を移動
        var newIndex = historyIndex + direction;
        
        if (newIndex >= 0 && newIndex < inputHistory.Count)
        {
            historyIndex = newIndex;
            inputText = inputHistory[historyIndex];
        }
        else if (newIndex < 0)
        {
            // 最古の履歴より前に行こうとした場合
            historyIndex = 0;
            inputText = inputHistory[historyIndex];
        }
        else if (newIndex >= inputHistory.Count)
        {
            // 最新の履歴より後に行こうとした場合は空にする
            historyIndex = -1;
            inputText = "";
        }
    }
    
    private async Task SaveInputHistoryAsync()
    {
        try
        {
            await LocalStorageService.SetAsync("inputHistory", inputHistory);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[History] 履歴保存エラー: {ex.Message}");
        }
    }
    
    private async Task LoadInputHistoryAsync()
    {
        try
        {
            var savedHistory = await LocalStorageService.GetAsync<List<string>>("inputHistory");
            if (savedHistory != null)
            {
                inputHistory = savedHistory;
                historyIndex = -1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[History] 履歴読み込みエラー: {ex.Message}");
        }
    }

    private void ShowSessionSettingsDialog(Guid sessionId)
    {
        settingsSessionId = sessionId;
        showSessionSettingsDialog = true;
    }

    private async Task OnSessionSettingsSaved()
    {
        showSessionSettingsDialog = false;
        // セッション一覧を更新
        sessions = SessionManager.GetAllSessions().ToList();
        await LocalStorageService.SaveSessionsAsync(sessions);
        
        // セッションが再起動された場合、ターミナルコンポーネントも再読み込み
        if (settingsSessionId.HasValue && settingsSessionId.Value == activeSessionId)
        {
            var sessionId = settingsSessionId.Value;
            
            // 既存の読み取りタスクを停止
            if (sessionReadCts.TryGetValue(sessionId, out var cts))
            {
                try
                {
                    cts.Cancel();
                    cts.Dispose();
                }
                finally
                {
                    sessionReadCts.Remove(sessionId);
                }
            }
            
            // 一旦nullにして再選択することで、ターミナルコンポーネントを再作成
            activeSessionId = null;
            activeSession = null;
            StateHasChanged();
            await Task.Delay(100); // UIの更新を待つ
            await SelectSession(sessionId);
        }
        else
        {
            StateHasChanged();
        }
        
        toast?.ShowSuccess("セッション設定を保存しました");
    }
    
    private async Task RefreshGitStatus(Guid sessionId)
    {
        var sessionInfo = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (sessionInfo != null && sessionInfo.IsGitRepository)
        {
            // Gitステータスを更新
            var gitInfo = await GitService.GetGitInfoAsync(sessionInfo.FolderPath);
            if (gitInfo != null)
            {
                sessionInfo.GitBranch = gitInfo.CurrentBranch;
                sessionInfo.HasUncommittedChanges = gitInfo.HasUncommittedChanges;
                sessionInfo.IsWorktree = gitInfo.IsWorktree;
                
                await LocalStorageService.SaveSessionsAsync(sessions);
                StateHasChanged();
            }
        }
    }

    private async Task StartClaudeWithoutContinue(Guid sessionId)
    {
        var session = SessionManager.GetSession(sessionId);
        var sessionInfo = sessions.FirstOrDefault(s => s.SessionId == sessionId);
        if (session == null || sessionInfo == null) return;

        Console.WriteLine($"[Claude Continue Fix] セッション {sessionId} に--continueなしでClaude起動コマンドを送信します");

        await InvokeAsync(async () =>
        {
            try
            {
                // 既存のオプションから--continueを除去してコマンドを構築
                var optionsWithoutContinue = new Dictionary<string, string>(sessionInfo.Options);
                optionsWithoutContinue.Remove("continue");
                
                // フルパスでclaude.cmdを指定し、ClaudeCodeArgs形式でコマンドを構築
                var claudeCmdPath = Configuration.GetValue<string>("ExternalTools:ClaudeCmdPath");
                if (string.IsNullOrEmpty(claudeCmdPath))
                {
                    var userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                    claudeCmdPath = Path.Combine(userProfile, "AppData", "Roaming", "npm", "claude.cmd");
                }
                
                var args = TerminalConstants.BuildClaudeCodeArgs(optionsWithoutContinue);
                var command = string.IsNullOrWhiteSpace(args) 
                    ? $"\"{claudeCmdPath}\"" 
                    : $"\"{claudeCmdPath}\" {args}";
                
                Console.WriteLine($"[Claude Continue Fix] 送信予定のコマンド: '{command}'");
                Console.WriteLine($"[Claude Continue Fix] コマンド長: {command.Length} バイト");
                
                // 現在のプロンプトをクリアし、確実にコマンドを送信
                await session.WriteAsync("\u0003"); // Ctrl+Cで現在の入力をキャンセル
                await Task.Delay(200);
                
                // バックスペースを複数回送信して見えない制御文字をクリア
                for (int i = 0; i < 10; i++)
                {
                    await session.WriteAsync("\b \b"); // バックスペース、スペース、バックスペースで確実にクリア
                }
                await Task.Delay(100);
                
                await session.WriteAsync($"{command}\r\n");
                
                Console.WriteLine($"[Claude Continue Fix] Claude起動コマンドを送信しました");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Claude Continue Fix] コマンド送信エラー: {ex.Message}");
            }
        });
    }
    
    public async ValueTask DisposeAsync()
    {
        // すべてのセッションのタイマーを停止
        foreach (var kvp in sessionProcessingTimers)
        {
            try
            {
                kvp.Value?.Dispose();
            }
            catch { }
        }
        sessionProcessingTimers.Clear();
        
        // すべてのセッションの読み取りタスクを停止
        foreach (var kvp in sessionReadCts)
        {
            try
            {
                kvp.Value.Cancel();
                kvp.Value.Dispose();
            }
            catch { }
        }
        sessionReadCts.Clear();
        
        // 履歴を保存
        await SaveInputHistoryAsync();
        
        if (activeTerminal != null)
        {
            await activeTerminal.DisposeAsync();
        }
        
        dotNetRef?.Dispose();

        // 接続を解除
        if (connectionId != null)
        {
            SessionManager.UnregisterConnection(connectionId);
        }
        
        // JavaScriptのイベントリスナーをクリーンアップ
        try
        {
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.cleanupKeyboardShortcuts");
            await JSRuntime.InvokeVoidAsync("terminalHubHelpers.cleanupDevWindowDrag");
        }
        catch (Exception)
        {
            // Dispose時のエラーは無視
        }
    }

    private async Task TakeMasterControl()
    {
        if (connectionId != null)
        {
            if (SessionManager.TrySetMasterConnection(connectionId))
            {
                isMasterConnection = true;
                Console.WriteLine($"[Connection] 接続 {connectionId} がマスターになりました");
                
                // 読み取り処理を開始（まだ開始していない場合）
                if (activeSessionId.HasValue && activeSession != null && !sessionReadCts.ContainsKey(activeSessionId.Value))
                {
                    var cts = new CancellationTokenSource();
                    sessionReadCts[activeSessionId.Value] = cts;
                    _ = Task.Run(() => ReadSessionOutput(activeSessionId.Value, cts.Token));
                }
                
                // ターミナルのリサイズを強制
                if (activeSessionId.HasValue)
                {
                    await RecreateTerminal(activeSessionId.Value);
                }
            }
        }
    }
}
